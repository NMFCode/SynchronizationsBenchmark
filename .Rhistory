lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 40, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
getwd()
ergebnisse = read.csv2("resultsMax")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 40, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("resultsMax.csv")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 40, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
View(ergebnisse)
size = ergebnisse$Size
poll = as.vector(ergebnisse$Poll.Main.)
inc = as.vector(ergebnisse$Incremental.Main.)
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 40, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisseMax.csv")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 40, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisseMax.csv")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)/1000
inc = as.vector(ergebnisse$Incremental)/1000
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 40, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisseMax.csv")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)/1000
inc = as.vector(ergebnisse$Incremental)/1000
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 20, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisseMax.csv")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)/1000
inc = as.vector(ergebnisse$Incremental)/1000
pdf(file="..\\img\\ergebnisseMax.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 20, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)/1000
inc = as.vector(ergebnisse$Incremental)/1000
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 20, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
)
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)
inc = as.vector(ergebnisse$Incremental)
size = ergebnisse$Size
poll = as.vector(ergebnisse$Polling)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, poll, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, poll, col="blue")
points(size, poll, pch=16, col="blue")
lines(size, inc, col="red")
points(size, inc, pch=2, col="red")
legend(20, 20, c("Polling", "Incremental"), col=c('blue', 'red'), pch=c(16,2), bty='n', lty=1)
dev.off()
getwd()
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
classic = as.vector(ergebnisse$Classic.Main)
batch = as.vector(ergebnisse$Batch.Main)
inc = as.vector(ergebnisse$Incremental.Main)
help(lines)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 20, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
classic = as.vector(ergebnisse$Classic.Main)
batch = as.vector(ergebnisse$Batch.Main)
inc = as.vector(ergebnisse$Incremental.Main)
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 20, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
colnames(ergebnisse)
size = ergebnisse$Size
classic = as.vector(ergebnisse$Classic)
batch = as.vector(ergebnisse$Batch)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 20, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
classic = as.vector(ergebnisse$Classic)
batch = as.vector(ergebnisse$Batch)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 20, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
classic = as.vector(ergebnisse$Classic)
batch = as.vector(ergebnisse$Batch)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 20, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
dev.off()
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 6, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
ergebnisse = read.csv2("ergebnisse.csv")
size = ergebnisse$Size
classic = as.vector(ergebnisse$Classic)
batch = as.vector(ergebnisse$Batch)
inc = as.vector(ergebnisse$Incremental)
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 6, c("System.Linq", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
dev.off()
pdf(file="..\\img\\ergebnisse.pdf", width=6, height=3)
par(mar=c(4.3,4.0,0.3,0.3))
plot(size, batch, type="n", xlab="Size (n)", ylab="Runtime (seconds)")
lines(size, classic, col="blue")
points(size, classic, pch=16, col="blue")
lines(size, batch, col="red")
points(size, batch, pch=2, col="red")
lines(size, inc, col="purple")
points(size, inc, pch=8, col="purple")
legend(20, 6, c("LINQ to Objects", "NMF Expressions (Batch)", "NMF Expressions (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2,8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,7], type="n", xlab="Size (n)", ylab="Total Response Time [ms]", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,6], col="blue")
points(egAvg[,1], egAvg[,6], pch=16, col="blue")
lines(egAvg[,1], egAvg[,7], col="red")
points(egAvg[,1], egAvg[,7], pch=2, col="red")
lines(egAvg[,1], egAvg[,8], col="purple")
points(egAvg[,1], egAvg[,8], pch=7, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'green'), pch=c(16,2, 7), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,7], type="n", xlab="Size (n)", ylab="Total Response Time [ms]", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,6], col="blue")
points(egAvg[,1], egAvg[,6], pch=16, col="blue")
lines(egAvg[,1], egAvg[,7], col="red")
points(egAvg[,1], egAvg[,7], pch=2, col="red")
lines(egAvg[,1], egAvg[,8], col="purple")
points(egAvg[,1], egAvg[,8], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
View(egAvg)
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n)", ylab="Total Response Time [ms]", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
cwd()
cwd
setwd("C:/Paper/2015_ModelSync_ICMT/NMF Synchronizations Demo")
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n)", ylab="Total Response Time [ms]", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n)", ylab="Total Response Time [ms]", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
View(egAvg)
View(ergebnisse)
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
View(ergebnisse)
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
View(ergebnisse)
View(egAvg)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n)", ylab="Total Response Time [ms]", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms], log2", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms], log2", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms], log2", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
View(ergebnisse)
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms], log2", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms], log2", ylim=c(1,7000), log="xy")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms]")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 7000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms]")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 4000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms]")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 4000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms]")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 4000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Size (n), log2", ylab="Total Response Time [ms]")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 4000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
ergebnisse = read.csv2("bin\\Release\\results.csv", colClasses = c(rep('integer', 2),rep('numeric',6)))
size = ergebnisse$Size
colnames(ergebnisse) = c("Size", "Iteration", "InitTran", "InitBatch", "InitInc", "MainTran", "MainBatch", "MainInc")
egAvg = aggregate(ergebnisse[,3:8],list(size),mean)
pdf(file="..\\img\\results.pdf", width=6, height=4)
par(mar=c(4.3,4.0,0.3,0.3))
plot(egAvg[,1], egAvg[,6], type="n", xlab="Number of states", ylab="Total Response Time [ms]")
lines(egAvg[,1], egAvg[,5], col="blue")
points(egAvg[,1], egAvg[,5], pch=16, col="blue")
lines(egAvg[,1], egAvg[,6], col="red")
points(egAvg[,1], egAvg[,6], pch=2, col="red")
lines(egAvg[,1], egAvg[,7], col="purple")
points(egAvg[,1], egAvg[,7], pch=8, col="purple")
legend(10, 4000, c("NMF Transformations", "NMF Synchronizations (Batch)", "NMF Synchronizations (Incremental)"), col=c('blue', 'red', 'purple'), pch=c(16,2, 8), bty='n', lty=1)
dev.off()
