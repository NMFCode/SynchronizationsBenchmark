//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the Edge class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//Edge/")]
    public class Edge : ModelElement, IEdge, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Src property
        /// </summary>
        private IModelElement _src;
        
        /// <summary>
        /// The backing field for the Trg property
        /// </summary>
        private IModelElement _trg;
        
        /// <summary>
        /// The backing field for the Ref property
        /// </summary>
        private IEReference _ref;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The src property
        /// </summary>
        [XmlElementNameAttribute("src")]
        [XmlAttributeAttribute(true)]
        public virtual IModelElement Src
        {
            get
            {
                return this._src;
            }
            set
            {
                if ((this._src != value))
                {
                    IModelElement old = this._src;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSrcChanging(e);
                    this.OnPropertyChanging("Src", e);
                    this._src = value;
                    this.OnSrcChanged(e);
                    this.OnPropertyChanged("Src", e);
                }
            }
        }
        
        /// <summary>
        /// The trg property
        /// </summary>
        [XmlElementNameAttribute("trg")]
        [XmlAttributeAttribute(true)]
        public virtual IModelElement Trg
        {
            get
            {
                return this._trg;
            }
            set
            {
                if ((this._trg != value))
                {
                    IModelElement old = this._trg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrgChanging(e);
                    this.OnPropertyChanging("Trg", e);
                    this._trg = value;
                    this.OnTrgChanged(e);
                    this.OnPropertyChanged("Trg", e);
                }
            }
        }
        
        /// <summary>
        /// The ref property
        /// </summary>
        [XmlElementNameAttribute("ref")]
        [XmlAttributeAttribute(true)]
        public virtual IEReference Ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                if ((this._ref != value))
                {
                    IEReference old = this._ref;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRefChanging(e);
                    this.OnPropertyChanging("Ref", e);
                    this._ref = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRef;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRef;
                    }
                    this.OnRefChanged(e);
                    this.OnPropertyChanged("Ref", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EdgeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//Edge/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Src property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SrcChanging;
        
        /// <summary>
        /// Gets fired when the Src property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SrcChanged;
        
        /// <summary>
        /// Gets fired before the Trg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrgChanging;
        
        /// <summary>
        /// Gets fired when the Trg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrgChanged;
        
        /// <summary>
        /// Gets fired before the Ref property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefChanging;
        
        /// <summary>
        /// Gets fired when the Ref property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefChanged;
        
        /// <summary>
        /// Raises the SrcChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSrcChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SrcChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SrcChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSrcChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SrcChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Src property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSrc(object sender, System.EventArgs eventArgs)
        {
            this.Src = null;
        }
        
        /// <summary>
        /// Raises the TrgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Trg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrg(object sender, System.EventArgs eventArgs)
        {
            this.Trg = null;
        }
        
        /// <summary>
        /// Raises the RefChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Ref property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRef(object sender, System.EventArgs eventArgs)
        {
            this.Ref = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SRC"))
            {
                this.Src = ((IModelElement)(value));
                return;
            }
            if ((feature == "TRG"))
            {
                this.Trg = ((IModelElement)(value));
                return;
            }
            if ((feature == "REF"))
            {
                this.Ref = ((IEReference)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Src"))
            {
                return new SrcProxy(this);
            }
            if ((attribute == "Trg"))
            {
                return new TrgProxy(this);
            }
            if ((attribute == "Ref"))
            {
                return new RefProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Src"))
            {
                return new SrcProxy(this);
            }
            if ((reference == "Trg"))
            {
                return new TrgProxy(this);
            }
            if ((reference == "Ref"))
            {
                return new RefProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//Edge/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Edge class
        /// </summary>
        public class EdgeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Edge _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EdgeReferencedElementsCollection(Edge parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Src != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Trg != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Ref != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SrcChanged += this.PropagateValueChanges;
                this._parent.TrgChanged += this.PropagateValueChanges;
                this._parent.RefChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SrcChanged -= this.PropagateValueChanges;
                this._parent.TrgChanged -= this.PropagateValueChanges;
                this._parent.RefChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Src == null))
                {
                    this._parent.Src = item;
                    return;
                }
                if ((this._parent.Trg == null))
                {
                    this._parent.Trg = item;
                    return;
                }
                if ((this._parent.Ref == null))
                {
                    IEReference refCasted = item.As<IEReference>();
                    if ((refCasted != null))
                    {
                        this._parent.Ref = refCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Src = null;
                this._parent.Trg = null;
                this._parent.Ref = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Src))
                {
                    return true;
                }
                if ((item == this._parent.Trg))
                {
                    return true;
                }
                if ((item == this._parent.Ref))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Src != null))
                {
                    array[arrayIndex] = this._parent.Src;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Trg != null))
                {
                    array[arrayIndex] = this._parent.Trg;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Ref != null))
                {
                    array[arrayIndex] = this._parent.Ref;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Src == item))
                {
                    this._parent.Src = null;
                    return true;
                }
                if ((this._parent.Trg == item))
                {
                    this._parent.Trg = null;
                    return true;
                }
                if ((this._parent.Ref == item))
                {
                    this._parent.Ref = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Src).Concat(this._parent.Trg).Concat(this._parent.Ref).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the src property
        /// </summary>
        private sealed class SrcProxy : ModelPropertyChange<IEdge, IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SrcProxy(IEdge modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IModelElement Value
            {
                get
                {
                    return this.ModelElement.Src;
                }
                set
                {
                    this.ModelElement.Src = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SrcChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SrcChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the trg property
        /// </summary>
        private sealed class TrgProxy : ModelPropertyChange<IEdge, IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrgProxy(IEdge modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IModelElement Value
            {
                get
                {
                    return this.ModelElement.Trg;
                }
                set
                {
                    this.ModelElement.Trg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TrgChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TrgChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ref property
        /// </summary>
        private sealed class RefProxy : ModelPropertyChange<IEdge, IEReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefProxy(IEdge modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEReference Value
            {
                get
                {
                    return this.ModelElement.Ref;
                }
                set
                {
                    this.ModelElement.Ref = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefChanged -= handler;
            }
        }
    }
}

