//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the Match class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//Match")]
    public partial class Match : TGGRuleMorphism, IMatch, NMF.Models.IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _succeedingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSucceedingReference);
        
        /// <summary>
        /// The backing field for the Succeeding property
        /// </summary>
        private ObservableAssociationOrderedSet<IMatch> _succeeding;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _toBeTranslatedNodesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveToBeTranslatedNodesReference);
        
        /// <summary>
        /// The backing field for the ToBeTranslatedNodes property
        /// </summary>
        private ObservableAssociationOrderedSet<NMF.Models.IModelElement> _toBeTranslatedNodes;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _contextNodesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveContextNodesReference);
        
        /// <summary>
        /// The backing field for the ContextNodes property
        /// </summary>
        private ObservableAssociationOrderedSet<NMF.Models.IModelElement> _contextNodes;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isApplicableCCOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsApplicableCCOperationReference);
        
        /// <summary>
        /// The backing field for the IsApplicableCCOperation property
        /// </summary>
        private NMF.Models.Meta.IOperation _isApplicableCCOperation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isApplicableOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsApplicableOperationReference);
        
        /// <summary>
        /// The backing field for the IsApplicableOperation property
        /// </summary>
        private NMF.Models.Meta.IOperation _isApplicableOperation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _contextEdgesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveContextEdgesReference);
        
        /// <summary>
        /// The backing field for the ContextEdges property
        /// </summary>
        private ObservableAssociationOrderedSet<IEMoflonEdge> _contextEdges;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _toBeTranslatedEdgesReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveToBeTranslatedEdgesReference);
        
        /// <summary>
        /// The backing field for the ToBeTranslatedEdges property
        /// </summary>
        private ObservableAssociationOrderedSet<IEMoflonEdge> _toBeTranslatedEdges;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Match()
        {
            this._succeeding = new ObservableAssociationOrderedSet<IMatch>();
            this._succeeding.CollectionChanging += this.SucceedingCollectionChanging;
            this._succeeding.CollectionChanged += this.SucceedingCollectionChanged;
            this._toBeTranslatedNodes = new ObservableAssociationOrderedSet<NMF.Models.IModelElement>();
            this._toBeTranslatedNodes.CollectionChanging += this.ToBeTranslatedNodesCollectionChanging;
            this._toBeTranslatedNodes.CollectionChanged += this.ToBeTranslatedNodesCollectionChanged;
            this._contextNodes = new ObservableAssociationOrderedSet<NMF.Models.IModelElement>();
            this._contextNodes.CollectionChanging += this.ContextNodesCollectionChanging;
            this._contextNodes.CollectionChanged += this.ContextNodesCollectionChanged;
            this._contextEdges = new ObservableAssociationOrderedSet<IEMoflonEdge>();
            this._contextEdges.CollectionChanging += this.ContextEdgesCollectionChanging;
            this._contextEdges.CollectionChanged += this.ContextEdgesCollectionChanged;
            this._toBeTranslatedEdges = new ObservableAssociationOrderedSet<IEMoflonEdge>();
            this._toBeTranslatedEdges.CollectionChanging += this.ToBeTranslatedEdgesCollectionChanging;
            this._toBeTranslatedEdges.CollectionChanged += this.ToBeTranslatedEdgesCollectionChanged;
        }
        
        /// <summary>
        /// The succeeding property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("succeeding")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMatch> Succeeding
        {
            get
            {
                return this._succeeding;
            }
        }
        
        /// <summary>
        /// The toBeTranslatedNodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("toBeTranslatedNodes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Models.IModelElement> ToBeTranslatedNodes
        {
            get
            {
                return this._toBeTranslatedNodes;
            }
        }
        
        /// <summary>
        /// The contextNodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("contextNodes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Models.IModelElement> ContextNodes
        {
            get
            {
                return this._contextNodes;
            }
        }
        
        /// <summary>
        /// The isApplicableCCOperation property
        /// </summary>
        [XmlElementNameAttribute("isApplicableCCOperation")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IOperation IsApplicableCCOperation
        {
            get
            {
                return this._isApplicableCCOperation;
            }
            set
            {
                if ((this._isApplicableCCOperation != value))
                {
                    NMF.Models.Meta.IOperation old = this._isApplicableCCOperation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsApplicableCCOperationChanging(e);
                    this.OnPropertyChanging("IsApplicableCCOperation", e, _isApplicableCCOperationReference);
                    this._isApplicableCCOperation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIsApplicableCCOperation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIsApplicableCCOperation;
                    }
                    this.OnIsApplicableCCOperationChanged(e);
                    this.OnPropertyChanged("IsApplicableCCOperation", e, _isApplicableCCOperationReference);
                }
            }
        }
        
        /// <summary>
        /// The isApplicableOperation property
        /// </summary>
        [XmlElementNameAttribute("isApplicableOperation")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IOperation IsApplicableOperation
        {
            get
            {
                return this._isApplicableOperation;
            }
            set
            {
                if ((this._isApplicableOperation != value))
                {
                    NMF.Models.Meta.IOperation old = this._isApplicableOperation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsApplicableOperationChanging(e);
                    this.OnPropertyChanging("IsApplicableOperation", e, _isApplicableOperationReference);
                    this._isApplicableOperation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIsApplicableOperation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIsApplicableOperation;
                    }
                    this.OnIsApplicableOperationChanged(e);
                    this.OnPropertyChanged("IsApplicableOperation", e, _isApplicableOperationReference);
                }
            }
        }
        
        /// <summary>
        /// The contextEdges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("contextEdges")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IEMoflonEdge> ContextEdges
        {
            get
            {
                return this._contextEdges;
            }
        }
        
        /// <summary>
        /// The toBeTranslatedEdges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("toBeTranslatedEdges")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IEMoflonEdge> ToBeTranslatedEdges
        {
            get
            {
                return this._toBeTranslatedEdges;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MatchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//Match")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsApplicableCCOperation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsApplicableCCOperationChanging;
        
        /// <summary>
        /// Gets fired when the IsApplicableCCOperation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsApplicableCCOperationChanged;
        
        /// <summary>
        /// Gets fired before the IsApplicableOperation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsApplicableOperationChanging;
        
        /// <summary>
        /// Gets fired when the IsApplicableOperation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsApplicableOperationChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveSucceedingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("succeeding")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Succeeding property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SucceedingCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Succeeding", e, _succeedingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Succeeding property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SucceedingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Succeeding", e, _succeedingReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveToBeTranslatedNodesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("toBeTranslatedNodes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToBeTranslatedNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToBeTranslatedNodesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ToBeTranslatedNodes", e, _toBeTranslatedNodesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToBeTranslatedNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToBeTranslatedNodesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToBeTranslatedNodes", e, _toBeTranslatedNodesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveContextNodesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("contextNodes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContextNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextNodesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContextNodes", e, _contextNodesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContextNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextNodesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContextNodes", e, _contextNodesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsApplicableCCOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("isApplicableCCOperation")));
        }
        
        /// <summary>
        /// Raises the IsApplicableCCOperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsApplicableCCOperationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsApplicableCCOperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsApplicableCCOperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsApplicableCCOperationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsApplicableCCOperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the IsApplicableCCOperation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIsApplicableCCOperation(object sender, System.EventArgs eventArgs)
        {
            this.IsApplicableCCOperation = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsApplicableOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("isApplicableOperation")));
        }
        
        /// <summary>
        /// Raises the IsApplicableOperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsApplicableOperationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsApplicableOperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsApplicableOperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsApplicableOperationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsApplicableOperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the IsApplicableOperation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIsApplicableOperation(object sender, System.EventArgs eventArgs)
        {
            this.IsApplicableOperation = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveContextEdgesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("contextEdges")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContextEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextEdgesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContextEdges", e, _contextEdgesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContextEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextEdgesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContextEdges", e, _contextEdgesReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveToBeTranslatedEdgesReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.Match.ClassInstance)).Resolve("toBeTranslatedEdges")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToBeTranslatedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToBeTranslatedEdgesCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ToBeTranslatedEdges", e, _toBeTranslatedEdgesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToBeTranslatedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToBeTranslatedEdgesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToBeTranslatedEdges", e, _toBeTranslatedEdgesReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SUCCEEDING"))
            {
                return this._succeeding;
            }
            if ((feature == "TOBETRANSLATEDNODES"))
            {
                return this._toBeTranslatedNodes;
            }
            if ((feature == "CONTEXTNODES"))
            {
                return this._contextNodes;
            }
            if ((feature == "CONTEXTEDGES"))
            {
                return this._contextEdges;
            }
            if ((feature == "TOBETRANSLATEDEDGES"))
            {
                return this._toBeTranslatedEdges;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISAPPLICABLECCOPERATION"))
            {
                this.IsApplicableCCOperation = ((NMF.Models.Meta.IOperation)(value));
                return;
            }
            if ((feature == "ISAPPLICABLEOPERATION"))
            {
                this.IsApplicableOperation = ((NMF.Models.Meta.IOperation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "IsApplicableCCOperation"))
            {
                return new IsApplicableCCOperationProxy(this);
            }
            if ((attribute == "IsApplicableOperation"))
            {
                return new IsApplicableOperationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IsApplicableCCOperation"))
            {
                return new IsApplicableCCOperationProxy(this);
            }
            if ((reference == "IsApplicableOperation"))
            {
                return new IsApplicableOperationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//Match")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Match class
        /// </summary>
        public class MatchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Match _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MatchReferencedElementsCollection(Match parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Succeeding.Count);
                    count = (count + this._parent.ToBeTranslatedNodes.Count);
                    count = (count + this._parent.ContextNodes.Count);
                    if ((this._parent.IsApplicableCCOperation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.IsApplicableOperation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ContextEdges.Count);
                    count = (count + this._parent.ToBeTranslatedEdges.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Succeeding.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ToBeTranslatedNodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContextNodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.IsApplicableCCOperationChanged += this.PropagateValueChanges;
                this._parent.IsApplicableOperationChanged += this.PropagateValueChanges;
                this._parent.ContextEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ToBeTranslatedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Succeeding.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ToBeTranslatedNodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContextNodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.IsApplicableCCOperationChanged -= this.PropagateValueChanges;
                this._parent.IsApplicableOperationChanged -= this.PropagateValueChanges;
                this._parent.ContextEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ToBeTranslatedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IMatch succeedingCasted = item.As<IMatch>();
                if ((succeedingCasted != null))
                {
                    this._parent.Succeeding.Add(succeedingCasted);
                }
                this._parent.ToBeTranslatedNodes.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Succeeding.Clear();
                this._parent.ToBeTranslatedNodes.Clear();
                this._parent.ContextNodes.Clear();
                this._parent.IsApplicableCCOperation = null;
                this._parent.IsApplicableOperation = null;
                this._parent.ContextEdges.Clear();
                this._parent.ToBeTranslatedEdges.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.Succeeding.Contains(item))
                {
                    return true;
                }
                if (this._parent.ToBeTranslatedNodes.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContextNodes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.IsApplicableCCOperation))
                {
                    return true;
                }
                if ((item == this._parent.IsApplicableOperation))
                {
                    return true;
                }
                if (this._parent.ContextEdges.Contains(item))
                {
                    return true;
                }
                if (this._parent.ToBeTranslatedEdges.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> succeedingEnumerator = this._parent.Succeeding.GetEnumerator();
                try
                {
                    for (
                    ; succeedingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = succeedingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    succeedingEnumerator.Dispose();
                }
                this._parent.ToBeTranslatedNodes.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.ToBeTranslatedNodes.Count);
                this._parent.ContextNodes.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.ContextNodes.Count);
                if ((this._parent.IsApplicableCCOperation != null))
                {
                    array[arrayIndex] = this._parent.IsApplicableCCOperation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.IsApplicableOperation != null))
                {
                    array[arrayIndex] = this._parent.IsApplicableOperation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<NMF.Models.IModelElement> contextEdgesEnumerator = this._parent.ContextEdges.GetEnumerator();
                try
                {
                    for (
                    ; contextEdgesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contextEdgesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contextEdgesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> toBeTranslatedEdgesEnumerator = this._parent.ToBeTranslatedEdges.GetEnumerator();
                try
                {
                    for (
                    ; toBeTranslatedEdgesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toBeTranslatedEdgesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toBeTranslatedEdgesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IMatch matchItem = item.As<IMatch>();
                if (((matchItem != null) 
                            && this._parent.Succeeding.Remove(matchItem)))
                {
                    return true;
                }
                if (this._parent.ToBeTranslatedNodes.Remove(item))
                {
                    return true;
                }
                if (this._parent.ContextNodes.Remove(item))
                {
                    return true;
                }
                if ((this._parent.IsApplicableCCOperation == item))
                {
                    this._parent.IsApplicableCCOperation = null;
                    return true;
                }
                if ((this._parent.IsApplicableOperation == item))
                {
                    this._parent.IsApplicableOperation = null;
                    return true;
                }
                IEMoflonEdge eMoflonEdgeItem = item.As<IEMoflonEdge>();
                if (((eMoflonEdgeItem != null) 
                            && this._parent.ContextEdges.Remove(eMoflonEdgeItem)))
                {
                    return true;
                }
                if (((eMoflonEdgeItem != null) 
                            && this._parent.ToBeTranslatedEdges.Remove(eMoflonEdgeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Succeeding).Concat(this._parent.ToBeTranslatedNodes).Concat(this._parent.ContextNodes).Concat(this._parent.IsApplicableCCOperation).Concat(this._parent.IsApplicableOperation).Concat(this._parent.ContextEdges).Concat(this._parent.ToBeTranslatedEdges).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isApplicableCCOperation property
        /// </summary>
        private sealed class IsApplicableCCOperationProxy : ModelPropertyChange<IMatch, NMF.Models.Meta.IOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsApplicableCCOperationProxy(IMatch modelElement) : 
                    base(modelElement, "isApplicableCCOperation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IOperation Value
            {
                get
                {
                    return this.ModelElement.IsApplicableCCOperation;
                }
                set
                {
                    this.ModelElement.IsApplicableCCOperation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isApplicableOperation property
        /// </summary>
        private sealed class IsApplicableOperationProxy : ModelPropertyChange<IMatch, NMF.Models.Meta.IOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsApplicableOperationProxy(IMatch modelElement) : 
                    base(modelElement, "isApplicableOperation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IOperation Value
            {
                get
                {
                    return this.ModelElement.IsApplicableOperation;
                }
                set
                {
                    this.ModelElement.IsApplicableOperation = value;
                }
            }
        }
    }
}

