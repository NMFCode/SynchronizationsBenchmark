//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the CCMatch class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//CCMatch/")]
    public class CCMatch : IsApplicableMatch, ICCMatch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TargetMatch property
        /// </summary>
        private IMatch _targetMatch;
        
        /// <summary>
        /// The backing field for the SourceMatch property
        /// </summary>
        private IMatch _sourceMatch;
        
        /// <summary>
        /// The backing field for the CreateCorr property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _createCorr;
        
        /// <summary>
        /// The backing field for the EObjects property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _eObjects;
        
        private static IClass _classInstance;
        
        public CCMatch()
        {
            this._createCorr = new ObservableAssociationOrderedSet<IModelElement>();
            this._createCorr.CollectionChanging += this.CreateCorrCollectionChanging;
            this._createCorr.CollectionChanged += this.CreateCorrCollectionChanged;
            this._eObjects = new ObservableAssociationOrderedSet<IModelElement>();
            this._eObjects.CollectionChanging += this.EObjectsCollectionChanging;
            this._eObjects.CollectionChanged += this.EObjectsCollectionChanged;
        }
        
        /// <summary>
        /// The targetMatch property
        /// </summary>
        [XmlElementNameAttribute("targetMatch")]
        [XmlAttributeAttribute(true)]
        public virtual IMatch TargetMatch
        {
            get
            {
                return this._targetMatch;
            }
            set
            {
                if ((this._targetMatch != value))
                {
                    IMatch old = this._targetMatch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetMatchChanging(e);
                    this.OnPropertyChanging("TargetMatch", e);
                    this._targetMatch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTargetMatch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTargetMatch;
                    }
                    this.OnTargetMatchChanged(e);
                    this.OnPropertyChanged("TargetMatch", e);
                }
            }
        }
        
        /// <summary>
        /// The sourceMatch property
        /// </summary>
        [XmlElementNameAttribute("sourceMatch")]
        [XmlAttributeAttribute(true)]
        public virtual IMatch SourceMatch
        {
            get
            {
                return this._sourceMatch;
            }
            set
            {
                if ((this._sourceMatch != value))
                {
                    IMatch old = this._sourceMatch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceMatchChanging(e);
                    this.OnPropertyChanging("SourceMatch", e);
                    this._sourceMatch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSourceMatch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSourceMatch;
                    }
                    this.OnSourceMatchChanged(e);
                    this.OnPropertyChanged("SourceMatch", e);
                }
            }
        }
        
        /// <summary>
        /// The createCorr property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("createCorr")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> CreateCorr
        {
            get
            {
                return this._createCorr;
            }
        }
        
        /// <summary>
        /// The eObjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eObjects")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> EObjects
        {
            get
            {
                return this._eObjects;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CCMatchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//CCMatch/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TargetMatch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetMatchChanging;
        
        /// <summary>
        /// Gets fired when the TargetMatch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetMatchChanged;
        
        /// <summary>
        /// Gets fired before the SourceMatch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceMatchChanging;
        
        /// <summary>
        /// Gets fired when the SourceMatch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceMatchChanged;
        
        /// <summary>
        /// Raises the TargetMatchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetMatchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetMatchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetMatchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetMatchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetMatchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TargetMatch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTargetMatch(object sender, System.EventArgs eventArgs)
        {
            this.TargetMatch = null;
        }
        
        /// <summary>
        /// Raises the SourceMatchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceMatchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceMatchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourceMatchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceMatchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceMatchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SourceMatch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSourceMatch(object sender, System.EventArgs eventArgs)
        {
            this.SourceMatch = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CreateCorr property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CreateCorrCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CreateCorr", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CreateCorr property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CreateCorrCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CreateCorr", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EObjectsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EObjects", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EObjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EObjects", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CREATECORR"))
            {
                return this._createCorr;
            }
            if ((feature == "EOBJECTS"))
            {
                return this._eObjects;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TARGETMATCH"))
            {
                this.TargetMatch = ((IMatch)(value));
                return;
            }
            if ((feature == "SOURCEMATCH"))
            {
                this.SourceMatch = ((IMatch)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TargetMatch"))
            {
                return new TargetMatchProxy(this);
            }
            if ((attribute == "SourceMatch"))
            {
                return new SourceMatchProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TargetMatch"))
            {
                return new TargetMatchProxy(this);
            }
            if ((reference == "SourceMatch"))
            {
                return new SourceMatchProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//CCMatch/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CCMatch class
        /// </summary>
        public class CCMatchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CCMatch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CCMatchReferencedElementsCollection(CCMatch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TargetMatch != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SourceMatch != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CreateCorr.Count);
                    count = (count + this._parent.EObjects.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TargetMatchChanged += this.PropagateValueChanges;
                this._parent.SourceMatchChanged += this.PropagateValueChanges;
                this._parent.CreateCorr.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EObjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TargetMatchChanged -= this.PropagateValueChanges;
                this._parent.SourceMatchChanged -= this.PropagateValueChanges;
                this._parent.CreateCorr.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EObjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TargetMatch == null))
                {
                    IMatch targetMatchCasted = item.As<IMatch>();
                    if ((targetMatchCasted != null))
                    {
                        this._parent.TargetMatch = targetMatchCasted;
                        return;
                    }
                }
                if ((this._parent.SourceMatch == null))
                {
                    IMatch sourceMatchCasted = item.As<IMatch>();
                    if ((sourceMatchCasted != null))
                    {
                        this._parent.SourceMatch = sourceMatchCasted;
                        return;
                    }
                }
                this._parent.CreateCorr.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TargetMatch = null;
                this._parent.SourceMatch = null;
                this._parent.CreateCorr.Clear();
                this._parent.EObjects.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TargetMatch))
                {
                    return true;
                }
                if ((item == this._parent.SourceMatch))
                {
                    return true;
                }
                if (this._parent.CreateCorr.Contains(item))
                {
                    return true;
                }
                if (this._parent.EObjects.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TargetMatch != null))
                {
                    array[arrayIndex] = this._parent.TargetMatch;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SourceMatch != null))
                {
                    array[arrayIndex] = this._parent.SourceMatch;
                    arrayIndex = (arrayIndex + 1);
                }
                this._parent.CreateCorr.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.CreateCorr.Count);
                this._parent.EObjects.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.EObjects.Count);
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TargetMatch == item))
                {
                    this._parent.TargetMatch = null;
                    return true;
                }
                if ((this._parent.SourceMatch == item))
                {
                    this._parent.SourceMatch = null;
                    return true;
                }
                if (this._parent.CreateCorr.Remove(item))
                {
                    return true;
                }
                if (this._parent.EObjects.Remove(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TargetMatch).Concat(this._parent.SourceMatch).Concat(this._parent.CreateCorr).Concat(this._parent.EObjects).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetMatch property
        /// </summary>
        private sealed class TargetMatchProxy : ModelPropertyChange<ICCMatch, IMatch>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetMatchProxy(ICCMatch modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMatch Value
            {
                get
                {
                    return this.ModelElement.TargetMatch;
                }
                set
                {
                    this.ModelElement.TargetMatch = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetMatchChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetMatchChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sourceMatch property
        /// </summary>
        private sealed class SourceMatchProxy : ModelPropertyChange<ICCMatch, IMatch>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceMatchProxy(ICCMatch modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMatch Value
            {
                get
                {
                    return this.ModelElement.SourceMatch;
                }
                set
                {
                    this.ModelElement.SourceMatch = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourceMatchChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourceMatchChanged -= handler;
            }
        }
    }
}

