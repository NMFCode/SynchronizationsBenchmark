//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the ModelgeneratorRuleResult class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//ModelgeneratorRuleR" +
        "esult")]
    public partial class ModelgeneratorRuleResult : RuleResult, IModelgeneratorRuleResult, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the PerformCount property
        /// </summary>
        private int _performCount = 0;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _performCountAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePerformCountAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _sourceObjectsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSourceObjectsReference);
        
        /// <summary>
        /// The backing field for the SourceObjects property
        /// </summary>
        private ObservableAssociationOrderedSet<NMF.Models.IModelElement> _sourceObjects;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _targetObjectsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTargetObjectsReference);
        
        /// <summary>
        /// The backing field for the TargetObjects property
        /// </summary>
        private ObservableAssociationOrderedSet<NMF.Models.IModelElement> _targetObjects;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _corrObjectsReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveCorrObjectsReference);
        
        /// <summary>
        /// The backing field for the CorrObjects property
        /// </summary>
        private ObservableAssociationOrderedSet<NMF.Models.IModelElement> _corrObjects;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public ModelgeneratorRuleResult()
        {
            this._sourceObjects = new ObservableAssociationOrderedSet<NMF.Models.IModelElement>();
            this._sourceObjects.CollectionChanging += this.SourceObjectsCollectionChanging;
            this._sourceObjects.CollectionChanged += this.SourceObjectsCollectionChanged;
            this._targetObjects = new ObservableAssociationOrderedSet<NMF.Models.IModelElement>();
            this._targetObjects.CollectionChanging += this.TargetObjectsCollectionChanging;
            this._targetObjects.CollectionChanged += this.TargetObjectsCollectionChanged;
            this._corrObjects = new ObservableAssociationOrderedSet<NMF.Models.IModelElement>();
            this._corrObjects.CollectionChanging += this.CorrObjectsCollectionChanging;
            this._corrObjects.CollectionChanged += this.CorrObjectsCollectionChanged;
        }
        
        /// <summary>
        /// The performCount property
        /// </summary>
        [DefaultValueAttribute(0)]
        [XmlElementNameAttribute("performCount")]
        [XmlAttributeAttribute(true)]
        public int PerformCount
        {
            get
            {
                return this._performCount;
            }
            set
            {
                if ((this._performCount != value))
                {
                    int old = this._performCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPerformCountChanging(e);
                    this.OnPropertyChanging("PerformCount", e, _performCountAttribute);
                    this._performCount = value;
                    this.OnPerformCountChanged(e);
                    this.OnPropertyChanged("PerformCount", e, _performCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sourceObjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("sourceObjects")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Models.IModelElement> SourceObjects
        {
            get
            {
                return this._sourceObjects;
            }
        }
        
        /// <summary>
        /// The targetObjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("targetObjects")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Models.IModelElement> TargetObjects
        {
            get
            {
                return this._targetObjects;
            }
        }
        
        /// <summary>
        /// The corrObjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("corrObjects")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Models.IModelElement> CorrObjects
        {
            get
            {
                return this._corrObjects;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ModelgeneratorRuleResultReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//ModelgeneratorRuleR" +
                            "esult")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PerformCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerformCountChanging;
        
        /// <summary>
        /// Gets fired when the PerformCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerformCountChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrievePerformCountAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.ModelgeneratorRuleResult.ClassInstance)).Resolve("performCount")));
        }
        
        /// <summary>
        /// Raises the PerformCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerformCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerformCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PerformCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerformCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerformCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSourceObjectsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.ModelgeneratorRuleResult.ClassInstance)).Resolve("sourceObjects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SourceObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SourceObjectsCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SourceObjects", e, _sourceObjectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SourceObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SourceObjectsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SourceObjects", e, _sourceObjectsReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTargetObjectsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.ModelgeneratorRuleResult.ClassInstance)).Resolve("targetObjects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TargetObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TargetObjectsCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TargetObjects", e, _targetObjectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TargetObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TargetObjectsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TargetObjects", e, _targetObjectsReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveCorrObjectsReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.ModelgeneratorRuleResult.ClassInstance)).Resolve("corrObjects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CorrObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CorrObjectsCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CorrObjects", e, _corrObjectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CorrObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CorrObjectsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CorrObjects", e, _corrObjectsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PERFORMCOUNT"))
            {
                return this.PerformCount;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SOURCEOBJECTS"))
            {
                return this._sourceObjects;
            }
            if ((feature == "TARGETOBJECTS"))
            {
                return this._targetObjects;
            }
            if ((feature == "CORROBJECTS"))
            {
                return this._corrObjects;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PERFORMCOUNT"))
            {
                this.PerformCount = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//ModelgeneratorRuleR" +
                        "esult")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ModelgeneratorRuleResult class
        /// </summary>
        public class ModelgeneratorRuleResultReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private ModelgeneratorRuleResult _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ModelgeneratorRuleResultReferencedElementsCollection(ModelgeneratorRuleResult parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SourceObjects.Count);
                    count = (count + this._parent.TargetObjects.Count);
                    count = (count + this._parent.CorrObjects.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SourceObjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TargetObjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CorrObjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SourceObjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TargetObjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CorrObjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                this._parent.SourceObjects.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SourceObjects.Clear();
                this._parent.TargetObjects.Clear();
                this._parent.CorrObjects.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.SourceObjects.Contains(item))
                {
                    return true;
                }
                if (this._parent.TargetObjects.Contains(item))
                {
                    return true;
                }
                if (this._parent.CorrObjects.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                this._parent.SourceObjects.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.SourceObjects.Count);
                this._parent.TargetObjects.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.TargetObjects.Count);
                this._parent.CorrObjects.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.CorrObjects.Count);
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if (this._parent.SourceObjects.Remove(item))
                {
                    return true;
                }
                if (this._parent.TargetObjects.Remove(item))
                {
                    return true;
                }
                if (this._parent.CorrObjects.Remove(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.SourceObjects).Concat(this._parent.TargetObjects).Concat(this._parent.CorrObjects).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the performCount property
        /// </summary>
        private sealed class PerformCountProxy : ModelPropertyChange<IModelgeneratorRuleResult, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PerformCountProxy(IModelgeneratorRuleResult modelElement) : 
                    base(modelElement, "performCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PerformCount;
                }
                set
                {
                    this.ModelElement.PerformCount = value;
                }
            }
        }
    }
}

