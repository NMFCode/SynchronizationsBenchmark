//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the DeltaSpecification class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//DeltaSpecification/" +
        "")]
    public class DeltaSpecification : ModelElement, IDeltaSpecification, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TargetModel property
        /// </summary>
        private IModelElement _targetModel;
        
        /// <summary>
        /// The backing field for the AddedEdges property
        /// </summary>
        private ObservableCompositionOrderedSet<IEMoflonEdge> _addedEdges;
        
        /// <summary>
        /// The backing field for the DeletedNodes property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _deletedNodes;
        
        /// <summary>
        /// The backing field for the AddedNodes property
        /// </summary>
        private ObservableCompositionOrderedSet<IModelElement> _addedNodes;
        
        /// <summary>
        /// The backing field for the DeletedEdges property
        /// </summary>
        private ObservableCompositionOrderedSet<IEMoflonEdge> _deletedEdges;
        
        /// <summary>
        /// The backing field for the AttributeChanges property
        /// </summary>
        private DeltaSpecificationAttributeChangesCollection _attributeChanges;
        
        private static IClass _classInstance;
        
        public DeltaSpecification()
        {
            this._addedEdges = new ObservableCompositionOrderedSet<IEMoflonEdge>(this);
            this._addedEdges.CollectionChanging += this.AddedEdgesCollectionChanging;
            this._addedEdges.CollectionChanged += this.AddedEdgesCollectionChanged;
            this._deletedNodes = new ObservableAssociationOrderedSet<IModelElement>();
            this._deletedNodes.CollectionChanging += this.DeletedNodesCollectionChanging;
            this._deletedNodes.CollectionChanged += this.DeletedNodesCollectionChanged;
            this._addedNodes = new ObservableCompositionOrderedSet<IModelElement>(this);
            this._addedNodes.CollectionChanging += this.AddedNodesCollectionChanging;
            this._addedNodes.CollectionChanged += this.AddedNodesCollectionChanged;
            this._deletedEdges = new ObservableCompositionOrderedSet<IEMoflonEdge>(this);
            this._deletedEdges.CollectionChanging += this.DeletedEdgesCollectionChanging;
            this._deletedEdges.CollectionChanged += this.DeletedEdgesCollectionChanged;
            this._attributeChanges = new DeltaSpecificationAttributeChangesCollection(this);
            this._attributeChanges.CollectionChanging += this.AttributeChangesCollectionChanging;
            this._attributeChanges.CollectionChanged += this.AttributeChangesCollectionChanged;
        }
        
        /// <summary>
        /// The targetModel property
        /// </summary>
        [XmlElementNameAttribute("targetModel")]
        [XmlAttributeAttribute(true)]
        public virtual IModelElement TargetModel
        {
            get
            {
                return this._targetModel;
            }
            set
            {
                if ((this._targetModel != value))
                {
                    IModelElement old = this._targetModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetModelChanging(e);
                    this.OnPropertyChanging("TargetModel", e);
                    this._targetModel = value;
                    this.OnTargetModelChanged(e);
                    this.OnPropertyChanged("TargetModel", e);
                }
            }
        }
        
        /// <summary>
        /// The addedEdges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("addedEdges")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEMoflonEdge> AddedEdges
        {
            get
            {
                return this._addedEdges;
            }
        }
        
        /// <summary>
        /// The deletedNodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("deletedNodes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> DeletedNodes
        {
            get
            {
                return this._deletedNodes;
            }
        }
        
        /// <summary>
        /// The addedNodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("addedNodes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> AddedNodes
        {
            get
            {
                return this._addedNodes;
            }
        }
        
        /// <summary>
        /// The deletedEdges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("deletedEdges")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEMoflonEdge> DeletedEdges
        {
            get
            {
                return this._deletedEdges;
            }
        }
        
        /// <summary>
        /// The attributeChanges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("attributeChanges")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("delta")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAttributeDelta> AttributeChanges
        {
            get
            {
                return this._attributeChanges;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new DeltaSpecificationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DeltaSpecificationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//DeltaSpecification/" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TargetModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetModelChanging;
        
        /// <summary>
        /// Gets fired when the TargetModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetModelChanged;
        
        /// <summary>
        /// Raises the TargetModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TargetModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTargetModel(object sender, System.EventArgs eventArgs)
        {
            this.TargetModel = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AddedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AddedEdgesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AddedEdges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AddedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AddedEdgesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AddedEdges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DeletedNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeletedNodesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DeletedNodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DeletedNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeletedNodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DeletedNodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AddedNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AddedNodesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AddedNodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AddedNodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AddedNodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AddedNodes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DeletedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeletedEdgesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DeletedEdges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DeletedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeletedEdgesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DeletedEdges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AttributeChanges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeChangesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AttributeChanges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AttributeChanges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeChangesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AttributeChanges", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int addedEdgesIndex = ModelHelper.IndexOfReference(this.AddedEdges, element);
            if ((addedEdgesIndex != -1))
            {
                return ModelHelper.CreatePath("addedEdges", addedEdgesIndex);
            }
            int addedNodesIndex = ModelHelper.IndexOfReference(this.AddedNodes, element);
            if ((addedNodesIndex != -1))
            {
                return ModelHelper.CreatePath("addedNodes", addedNodesIndex);
            }
            int deletedEdgesIndex = ModelHelper.IndexOfReference(this.DeletedEdges, element);
            if ((deletedEdgesIndex != -1))
            {
                return ModelHelper.CreatePath("deletedEdges", deletedEdgesIndex);
            }
            int attributeChangesIndex = ModelHelper.IndexOfReference(this.AttributeChanges, element);
            if ((attributeChangesIndex != -1))
            {
                return ModelHelper.CreatePath("attributeChanges", attributeChangesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ADDEDEDGES"))
            {
                if ((index < this.AddedEdges.Count))
                {
                    return this.AddedEdges[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ADDEDNODES"))
            {
                if ((index < this.AddedNodes.Count))
                {
                    return this.AddedNodes[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DELETEDEDGES"))
            {
                if ((index < this.DeletedEdges.Count))
                {
                    return this.DeletedEdges[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ATTRIBUTECHANGES"))
            {
                if ((index < this.AttributeChanges.Count))
                {
                    return this.AttributeChanges[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ADDEDEDGES"))
            {
                return this._addedEdges;
            }
            if ((feature == "DELETEDNODES"))
            {
                return this._deletedNodes;
            }
            if ((feature == "ADDEDNODES"))
            {
                return this._addedNodes;
            }
            if ((feature == "DELETEDEDGES"))
            {
                return this._deletedEdges;
            }
            if ((feature == "ATTRIBUTECHANGES"))
            {
                return this._attributeChanges;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TARGETMODEL"))
            {
                this.TargetModel = ((IModelElement)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TargetModel"))
            {
                return new TargetModelProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TargetModel"))
            {
                return new TargetModelProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//DeltaSpecification/" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DeltaSpecification class
        /// </summary>
        public class DeltaSpecificationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DeltaSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DeltaSpecificationChildrenCollection(DeltaSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AddedEdges.Count);
                    count = (count + this._parent.AddedNodes.Count);
                    count = (count + this._parent.DeletedEdges.Count);
                    count = (count + this._parent.AttributeChanges.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AddedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AddedNodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DeletedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AttributeChanges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AddedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AddedNodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DeletedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AttributeChanges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEMoflonEdge addedEdgesCasted = item.As<IEMoflonEdge>();
                if ((addedEdgesCasted != null))
                {
                    this._parent.AddedEdges.Add(addedEdgesCasted);
                }
                this._parent.AddedNodes.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AddedEdges.Clear();
                this._parent.AddedNodes.Clear();
                this._parent.DeletedEdges.Clear();
                this._parent.AttributeChanges.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AddedEdges.Contains(item))
                {
                    return true;
                }
                if (this._parent.AddedNodes.Contains(item))
                {
                    return true;
                }
                if (this._parent.DeletedEdges.Contains(item))
                {
                    return true;
                }
                if (this._parent.AttributeChanges.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> addedEdgesEnumerator = this._parent.AddedEdges.GetEnumerator();
                try
                {
                    for (
                    ; addedEdgesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = addedEdgesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    addedEdgesEnumerator.Dispose();
                }
                this._parent.AddedNodes.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.AddedNodes.Count);
                IEnumerator<IModelElement> deletedEdgesEnumerator = this._parent.DeletedEdges.GetEnumerator();
                try
                {
                    for (
                    ; deletedEdgesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deletedEdgesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deletedEdgesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> attributeChangesEnumerator = this._parent.AttributeChanges.GetEnumerator();
                try
                {
                    for (
                    ; attributeChangesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeChangesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeChangesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEMoflonEdge eMoflonEdgeItem = item.As<IEMoflonEdge>();
                if (((eMoflonEdgeItem != null) 
                            && this._parent.AddedEdges.Remove(eMoflonEdgeItem)))
                {
                    return true;
                }
                if (this._parent.AddedNodes.Remove(item))
                {
                    return true;
                }
                if (((eMoflonEdgeItem != null) 
                            && this._parent.DeletedEdges.Remove(eMoflonEdgeItem)))
                {
                    return true;
                }
                IAttributeDelta attributeDeltaItem = item.As<IAttributeDelta>();
                if (((attributeDeltaItem != null) 
                            && this._parent.AttributeChanges.Remove(attributeDeltaItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AddedEdges).Concat(this._parent.AddedNodes).Concat(this._parent.DeletedEdges).Concat(this._parent.AttributeChanges).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DeltaSpecification class
        /// </summary>
        public class DeltaSpecificationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DeltaSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DeltaSpecificationReferencedElementsCollection(DeltaSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TargetModel != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AddedEdges.Count);
                    count = (count + this._parent.DeletedNodes.Count);
                    count = (count + this._parent.AddedNodes.Count);
                    count = (count + this._parent.DeletedEdges.Count);
                    count = (count + this._parent.AttributeChanges.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TargetModelChanged += this.PropagateValueChanges;
                this._parent.AddedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DeletedNodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AddedNodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DeletedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AttributeChanges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TargetModelChanged -= this.PropagateValueChanges;
                this._parent.AddedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DeletedNodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AddedNodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DeletedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AttributeChanges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TargetModel == null))
                {
                    this._parent.TargetModel = item;
                    return;
                }
                IEMoflonEdge addedEdgesCasted = item.As<IEMoflonEdge>();
                if ((addedEdgesCasted != null))
                {
                    this._parent.AddedEdges.Add(addedEdgesCasted);
                }
                this._parent.DeletedNodes.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TargetModel = null;
                this._parent.AddedEdges.Clear();
                this._parent.DeletedNodes.Clear();
                this._parent.AddedNodes.Clear();
                this._parent.DeletedEdges.Clear();
                this._parent.AttributeChanges.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TargetModel))
                {
                    return true;
                }
                if (this._parent.AddedEdges.Contains(item))
                {
                    return true;
                }
                if (this._parent.DeletedNodes.Contains(item))
                {
                    return true;
                }
                if (this._parent.AddedNodes.Contains(item))
                {
                    return true;
                }
                if (this._parent.DeletedEdges.Contains(item))
                {
                    return true;
                }
                if (this._parent.AttributeChanges.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TargetModel != null))
                {
                    array[arrayIndex] = this._parent.TargetModel;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> addedEdgesEnumerator = this._parent.AddedEdges.GetEnumerator();
                try
                {
                    for (
                    ; addedEdgesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = addedEdgesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    addedEdgesEnumerator.Dispose();
                }
                this._parent.DeletedNodes.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.DeletedNodes.Count);
                this._parent.AddedNodes.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.AddedNodes.Count);
                IEnumerator<IModelElement> deletedEdgesEnumerator = this._parent.DeletedEdges.GetEnumerator();
                try
                {
                    for (
                    ; deletedEdgesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deletedEdgesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deletedEdgesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> attributeChangesEnumerator = this._parent.AttributeChanges.GetEnumerator();
                try
                {
                    for (
                    ; attributeChangesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeChangesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeChangesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TargetModel == item))
                {
                    this._parent.TargetModel = null;
                    return true;
                }
                IEMoflonEdge eMoflonEdgeItem = item.As<IEMoflonEdge>();
                if (((eMoflonEdgeItem != null) 
                            && this._parent.AddedEdges.Remove(eMoflonEdgeItem)))
                {
                    return true;
                }
                if (this._parent.DeletedNodes.Remove(item))
                {
                    return true;
                }
                if (this._parent.AddedNodes.Remove(item))
                {
                    return true;
                }
                if (((eMoflonEdgeItem != null) 
                            && this._parent.DeletedEdges.Remove(eMoflonEdgeItem)))
                {
                    return true;
                }
                IAttributeDelta attributeDeltaItem = item.As<IAttributeDelta>();
                if (((attributeDeltaItem != null) 
                            && this._parent.AttributeChanges.Remove(attributeDeltaItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TargetModel).Concat(this._parent.AddedEdges).Concat(this._parent.DeletedNodes).Concat(this._parent.AddedNodes).Concat(this._parent.DeletedEdges).Concat(this._parent.AttributeChanges).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetModel property
        /// </summary>
        private sealed class TargetModelProxy : ModelPropertyChange<IDeltaSpecification, IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetModelProxy(IDeltaSpecification modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IModelElement Value
            {
                get
                {
                    return this.ModelElement.TargetModel;
                }
                set
                {
                    this.ModelElement.TargetModel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetModelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetModelChanged -= handler;
            }
        }
    }
}

