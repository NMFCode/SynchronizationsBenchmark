//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the IsApplicableMatch class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//IsApplicableMatch/")]
    public class IsApplicableMatch : TGGRuleMorphism, IIsApplicableMatch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AttributeInfo property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _attributeInfo;
        
        /// <summary>
        /// The backing field for the AllContextElements property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _allContextElements;
        
        private static IClass _classInstance;
        
        public IsApplicableMatch()
        {
            this._attributeInfo = new ObservableAssociationOrderedSet<IModelElement>();
            this._attributeInfo.CollectionChanging += this.AttributeInfoCollectionChanging;
            this._attributeInfo.CollectionChanged += this.AttributeInfoCollectionChanged;
            this._allContextElements = new ObservableAssociationOrderedSet<IModelElement>();
            this._allContextElements.CollectionChanging += this.AllContextElementsCollectionChanging;
            this._allContextElements.CollectionChanged += this.AllContextElementsCollectionChanged;
        }
        
        /// <summary>
        /// The isApplicableRuleResult property
        /// </summary>
        [XmlElementNameAttribute("isApplicableRuleResult")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("isApplicableMatch")]
        public virtual IIsApplicableRuleResult IsApplicableRuleResult
        {
            get
            {
                return ModelHelper.CastAs<IIsApplicableRuleResult>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The attributeInfo property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("attributeInfo")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> AttributeInfo
        {
            get
            {
                return this._attributeInfo;
            }
        }
        
        /// <summary>
        /// The allContextElements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("allContextElements")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> AllContextElements
        {
            get
            {
                return this._allContextElements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new IsApplicableMatchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//IsApplicableMatch/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsApplicableRuleResult property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsApplicableRuleResultChanging;
        
        /// <summary>
        /// Gets fired when the IsApplicableRuleResult property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsApplicableRuleResultChanged;
        
        /// <summary>
        /// Raises the IsApplicableRuleResultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsApplicableRuleResultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsApplicableRuleResultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IIsApplicableRuleResult oldIsApplicableRuleResult = ModelHelper.CastAs<IIsApplicableRuleResult>(oldParent);
            IIsApplicableRuleResult newIsApplicableRuleResult = ModelHelper.CastAs<IIsApplicableRuleResult>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldIsApplicableRuleResult, newIsApplicableRuleResult);
            this.OnIsApplicableRuleResultChanging(e);
            this.OnPropertyChanging("IsApplicableRuleResult");
        }
        
        /// <summary>
        /// Raises the IsApplicableRuleResultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsApplicableRuleResultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsApplicableRuleResultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IIsApplicableRuleResult oldIsApplicableRuleResult = ModelHelper.CastAs<IIsApplicableRuleResult>(oldParent);
            IIsApplicableRuleResult newIsApplicableRuleResult = ModelHelper.CastAs<IIsApplicableRuleResult>(newParent);
            if ((oldIsApplicableRuleResult != null))
            {
                oldIsApplicableRuleResult.IsApplicableMatch.Remove(this);
            }
            if ((newIsApplicableRuleResult != null))
            {
                newIsApplicableRuleResult.IsApplicableMatch.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldIsApplicableRuleResult, newIsApplicableRuleResult);
            this.OnIsApplicableRuleResultChanged(e);
            this.OnPropertyChanged("IsApplicableRuleResult", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AttributeInfo property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeInfoCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AttributeInfo", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AttributeInfo property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeInfoCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AttributeInfo", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AllContextElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AllContextElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AllContextElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AllContextElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AllContextElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AllContextElements", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ATTRIBUTEINFO"))
            {
                return this._attributeInfo;
            }
            if ((feature == "ALLCONTEXTELEMENTS"))
            {
                return this._allContextElements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISAPPLICABLERULERESULT"))
            {
                this.IsApplicableRuleResult = ((IIsApplicableRuleResult)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "IsApplicableRuleResult"))
            {
                return new IsApplicableRuleResultProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IsApplicableRuleResult"))
            {
                return new IsApplicableRuleResultProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//IsApplicableMatch/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IsApplicableMatch class
        /// </summary>
        public class IsApplicableMatchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IsApplicableMatch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IsApplicableMatchReferencedElementsCollection(IsApplicableMatch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.IsApplicableRuleResult != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AttributeInfo.Count);
                    count = (count + this._parent.AllContextElements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IsApplicableRuleResultChanged += this.PropagateValueChanges;
                this._parent.AttributeInfo.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AllContextElements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IsApplicableRuleResultChanged -= this.PropagateValueChanges;
                this._parent.AttributeInfo.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AllContextElements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.IsApplicableRuleResult == null))
                {
                    IIsApplicableRuleResult isApplicableRuleResultCasted = item.As<IIsApplicableRuleResult>();
                    if ((isApplicableRuleResultCasted != null))
                    {
                        this._parent.IsApplicableRuleResult = isApplicableRuleResultCasted;
                        return;
                    }
                }
                this._parent.AttributeInfo.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IsApplicableRuleResult = null;
                this._parent.AttributeInfo.Clear();
                this._parent.AllContextElements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.IsApplicableRuleResult))
                {
                    return true;
                }
                if (this._parent.AttributeInfo.Contains(item))
                {
                    return true;
                }
                if (this._parent.AllContextElements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.IsApplicableRuleResult != null))
                {
                    array[arrayIndex] = this._parent.IsApplicableRuleResult;
                    arrayIndex = (arrayIndex + 1);
                }
                this._parent.AttributeInfo.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.AttributeInfo.Count);
                this._parent.AllContextElements.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.AllContextElements.Count);
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.IsApplicableRuleResult == item))
                {
                    this._parent.IsApplicableRuleResult = null;
                    return true;
                }
                if (this._parent.AttributeInfo.Remove(item))
                {
                    return true;
                }
                if (this._parent.AllContextElements.Remove(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IsApplicableRuleResult).Concat(this._parent.AttributeInfo).Concat(this._parent.AllContextElements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isApplicableRuleResult property
        /// </summary>
        private sealed class IsApplicableRuleResultProxy : ModelPropertyChange<IIsApplicableMatch, IIsApplicableRuleResult>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsApplicableRuleResultProxy(IIsApplicableMatch modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IIsApplicableRuleResult Value
            {
                get
                {
                    return this.ModelElement.IsApplicableRuleResult;
                }
                set
                {
                    this.ModelElement.IsApplicableRuleResult = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsApplicableRuleResultChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsApplicableRuleResultChanged -= handler;
            }
        }
    }
}

