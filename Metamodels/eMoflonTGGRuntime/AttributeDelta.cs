//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the AttributeDelta class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//AttributeDelta/")]
    public class AttributeDelta : ModelElement, IAttributeDelta, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OldValue property
        /// </summary>
        private string _oldValue;
        
        /// <summary>
        /// The backing field for the NewValue property
        /// </summary>
        private string _newValue;
        
        /// <summary>
        /// The backing field for the AffectedAttribute property
        /// </summary>
        private IAttribute _affectedAttribute;
        
        /// <summary>
        /// The backing field for the AffectedNode property
        /// </summary>
        private IModelElement _affectedNode;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The oldValue property
        /// </summary>
        [XmlElementNameAttribute("oldValue")]
        [XmlAttributeAttribute(true)]
        public virtual string OldValue
        {
            get
            {
                return this._oldValue;
            }
            set
            {
                if ((this._oldValue != value))
                {
                    string old = this._oldValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOldValueChanging(e);
                    this.OnPropertyChanging("OldValue", e);
                    this._oldValue = value;
                    this.OnOldValueChanged(e);
                    this.OnPropertyChanged("OldValue", e);
                }
            }
        }
        
        /// <summary>
        /// The newValue property
        /// </summary>
        [XmlElementNameAttribute("newValue")]
        [XmlAttributeAttribute(true)]
        public virtual string NewValue
        {
            get
            {
                return this._newValue;
            }
            set
            {
                if ((this._newValue != value))
                {
                    string old = this._newValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNewValueChanging(e);
                    this.OnPropertyChanging("NewValue", e);
                    this._newValue = value;
                    this.OnNewValueChanged(e);
                    this.OnPropertyChanged("NewValue", e);
                }
            }
        }
        
        /// <summary>
        /// The delta property
        /// </summary>
        [XmlElementNameAttribute("delta")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("attributeChanges")]
        public virtual IDeltaSpecification Delta
        {
            get
            {
                return ModelHelper.CastAs<IDeltaSpecification>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The affectedAttribute property
        /// </summary>
        [XmlElementNameAttribute("affectedAttribute")]
        [XmlAttributeAttribute(true)]
        public virtual IAttribute AffectedAttribute
        {
            get
            {
                return this._affectedAttribute;
            }
            set
            {
                if ((this._affectedAttribute != value))
                {
                    IAttribute old = this._affectedAttribute;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAffectedAttributeChanging(e);
                    this.OnPropertyChanging("AffectedAttribute", e);
                    this._affectedAttribute = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAffectedAttribute;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAffectedAttribute;
                    }
                    this.OnAffectedAttributeChanged(e);
                    this.OnPropertyChanged("AffectedAttribute", e);
                }
            }
        }
        
        /// <summary>
        /// The affectedNode property
        /// </summary>
        [XmlElementNameAttribute("affectedNode")]
        [XmlAttributeAttribute(true)]
        public virtual IModelElement AffectedNode
        {
            get
            {
                return this._affectedNode;
            }
            set
            {
                if ((this._affectedNode != value))
                {
                    IModelElement old = this._affectedNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAffectedNodeChanging(e);
                    this.OnPropertyChanging("AffectedNode", e);
                    this._affectedNode = value;
                    this.OnAffectedNodeChanged(e);
                    this.OnPropertyChanged("AffectedNode", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AttributeDeltaReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//AttributeDelta/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OldValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldValueChanging;
        
        /// <summary>
        /// Gets fired when the OldValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldValueChanged;
        
        /// <summary>
        /// Gets fired before the NewValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NewValueChanging;
        
        /// <summary>
        /// Gets fired when the NewValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NewValueChanged;
        
        /// <summary>
        /// Gets fired before the Delta property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeltaChanging;
        
        /// <summary>
        /// Gets fired when the Delta property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeltaChanged;
        
        /// <summary>
        /// Gets fired before the AffectedAttribute property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AffectedAttributeChanging;
        
        /// <summary>
        /// Gets fired when the AffectedAttribute property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AffectedAttributeChanged;
        
        /// <summary>
        /// Gets fired before the AffectedNode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AffectedNodeChanging;
        
        /// <summary>
        /// Gets fired when the AffectedNode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AffectedNodeChanged;
        
        /// <summary>
        /// Raises the OldValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OldValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NewValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNewValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NewValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NewValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNewValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NewValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeltaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeltaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeltaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IDeltaSpecification oldDelta = ModelHelper.CastAs<IDeltaSpecification>(oldParent);
            IDeltaSpecification newDelta = ModelHelper.CastAs<IDeltaSpecification>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDelta, newDelta);
            this.OnDeltaChanging(e);
            this.OnPropertyChanging("Delta");
        }
        
        /// <summary>
        /// Raises the DeltaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeltaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeltaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IDeltaSpecification oldDelta = ModelHelper.CastAs<IDeltaSpecification>(oldParent);
            IDeltaSpecification newDelta = ModelHelper.CastAs<IDeltaSpecification>(newParent);
            if ((oldDelta != null))
            {
                oldDelta.AttributeChanges.Remove(this);
            }
            if ((newDelta != null))
            {
                newDelta.AttributeChanges.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDelta, newDelta);
            this.OnDeltaChanged(e);
            this.OnPropertyChanged("Delta", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Raises the AffectedAttributeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAffectedAttributeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AffectedAttributeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AffectedAttributeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAffectedAttributeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AffectedAttributeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AffectedAttribute property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAffectedAttribute(object sender, System.EventArgs eventArgs)
        {
            this.AffectedAttribute = null;
        }
        
        /// <summary>
        /// Raises the AffectedNodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAffectedNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AffectedNodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AffectedNodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAffectedNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AffectedNodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AffectedNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAffectedNode(object sender, System.EventArgs eventArgs)
        {
            this.AffectedNode = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OLDVALUE"))
            {
                return this.OldValue;
            }
            if ((attribute == "NEWVALUE"))
            {
                return this.NewValue;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DELTA"))
            {
                this.Delta = ((IDeltaSpecification)(value));
                return;
            }
            if ((feature == "AFFECTEDATTRIBUTE"))
            {
                this.AffectedAttribute = ((IAttribute)(value));
                return;
            }
            if ((feature == "AFFECTEDNODE"))
            {
                this.AffectedNode = ((IModelElement)(value));
                return;
            }
            if ((feature == "OLDVALUE"))
            {
                this.OldValue = ((string)(value));
                return;
            }
            if ((feature == "NEWVALUE"))
            {
                this.NewValue = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Delta"))
            {
                return new DeltaProxy(this);
            }
            if ((attribute == "AffectedAttribute"))
            {
                return new AffectedAttributeProxy(this);
            }
            if ((attribute == "AffectedNode"))
            {
                return new AffectedNodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Delta"))
            {
                return new DeltaProxy(this);
            }
            if ((reference == "AffectedAttribute"))
            {
                return new AffectedAttributeProxy(this);
            }
            if ((reference == "AffectedNode"))
            {
                return new AffectedNodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//AttributeDelta/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AttributeDelta class
        /// </summary>
        public class AttributeDeltaReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AttributeDelta _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AttributeDeltaReferencedElementsCollection(AttributeDelta parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Delta != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AffectedAttribute != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AffectedNode != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DeltaChanged += this.PropagateValueChanges;
                this._parent.AffectedAttributeChanged += this.PropagateValueChanges;
                this._parent.AffectedNodeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DeltaChanged -= this.PropagateValueChanges;
                this._parent.AffectedAttributeChanged -= this.PropagateValueChanges;
                this._parent.AffectedNodeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Delta == null))
                {
                    IDeltaSpecification deltaCasted = item.As<IDeltaSpecification>();
                    if ((deltaCasted != null))
                    {
                        this._parent.Delta = deltaCasted;
                        return;
                    }
                }
                if ((this._parent.AffectedAttribute == null))
                {
                    IAttribute affectedAttributeCasted = item.As<IAttribute>();
                    if ((affectedAttributeCasted != null))
                    {
                        this._parent.AffectedAttribute = affectedAttributeCasted;
                        return;
                    }
                }
                if ((this._parent.AffectedNode == null))
                {
                    this._parent.AffectedNode = item;
                    return;
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Delta = null;
                this._parent.AffectedAttribute = null;
                this._parent.AffectedNode = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Delta))
                {
                    return true;
                }
                if ((item == this._parent.AffectedAttribute))
                {
                    return true;
                }
                if ((item == this._parent.AffectedNode))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Delta != null))
                {
                    array[arrayIndex] = this._parent.Delta;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AffectedAttribute != null))
                {
                    array[arrayIndex] = this._parent.AffectedAttribute;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AffectedNode != null))
                {
                    array[arrayIndex] = this._parent.AffectedNode;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Delta == item))
                {
                    this._parent.Delta = null;
                    return true;
                }
                if ((this._parent.AffectedAttribute == item))
                {
                    this._parent.AffectedAttribute = null;
                    return true;
                }
                if ((this._parent.AffectedNode == item))
                {
                    this._parent.AffectedNode = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Delta).Concat(this._parent.AffectedAttribute).Concat(this._parent.AffectedNode).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oldValue property
        /// </summary>
        private sealed class OldValueProxy : ModelPropertyChange<IAttributeDelta, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OldValueProxy(IAttributeDelta modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OldValue;
                }
                set
                {
                    this.ModelElement.OldValue = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OldValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OldValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the newValue property
        /// </summary>
        private sealed class NewValueProxy : ModelPropertyChange<IAttributeDelta, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NewValueProxy(IAttributeDelta modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NewValue;
                }
                set
                {
                    this.ModelElement.NewValue = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NewValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NewValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the delta property
        /// </summary>
        private sealed class DeltaProxy : ModelPropertyChange<IAttributeDelta, IDeltaSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeltaProxy(IAttributeDelta modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDeltaSpecification Value
            {
                get
                {
                    return this.ModelElement.Delta;
                }
                set
                {
                    this.ModelElement.Delta = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeltaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeltaChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the affectedAttribute property
        /// </summary>
        private sealed class AffectedAttributeProxy : ModelPropertyChange<IAttributeDelta, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AffectedAttributeProxy(IAttributeDelta modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.AffectedAttribute;
                }
                set
                {
                    this.ModelElement.AffectedAttribute = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AffectedAttributeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AffectedAttributeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the affectedNode property
        /// </summary>
        private sealed class AffectedNodeProxy : ModelPropertyChange<IAttributeDelta, IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AffectedNodeProxy(IAttributeDelta modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IModelElement Value
            {
                get
                {
                    return this.ModelElement.AffectedNode;
                }
                set
                {
                    this.ModelElement.AffectedNode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AffectedNodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AffectedNodeChanged -= handler;
            }
        }
    }
}

