//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the TripleMatchNodeMapping class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//TripleMatchNodeMapp" +
        "ing/")]
    public class TripleMatchNodeMapping : ModelElement, ITripleMatchNodeMapping, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NodeName property
        /// </summary>
        private string _nodeName;
        
        /// <summary>
        /// The backing field for the Node property
        /// </summary>
        private IModelElement _node;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The nodeName property
        /// </summary>
        [XmlElementNameAttribute("nodeName")]
        [XmlAttributeAttribute(true)]
        public virtual string NodeName
        {
            get
            {
                return this._nodeName;
            }
            set
            {
                if ((this._nodeName != value))
                {
                    string old = this._nodeName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNodeNameChanging(e);
                    this.OnPropertyChanging("NodeName", e);
                    this._nodeName = value;
                    this.OnNodeNameChanged(e);
                    this.OnPropertyChanged("NodeName", e);
                }
            }
        }
        
        /// <summary>
        /// The node property
        /// </summary>
        [XmlElementNameAttribute("node")]
        [XmlAttributeAttribute(true)]
        public virtual IModelElement Node
        {
            get
            {
                return this._node;
            }
            set
            {
                if ((this._node != value))
                {
                    IModelElement old = this._node;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNodeChanging(e);
                    this.OnPropertyChanging("Node", e);
                    this._node = value;
                    this.OnNodeChanged(e);
                    this.OnPropertyChanged("Node", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TripleMatchNodeMappingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//TripleMatchNodeMapp" +
                            "ing/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NodeName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NodeNameChanging;
        
        /// <summary>
        /// Gets fired when the NodeName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NodeNameChanged;
        
        /// <summary>
        /// Gets fired before the Node property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NodeChanging;
        
        /// <summary>
        /// Gets fired when the Node property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NodeChanged;
        
        /// <summary>
        /// Raises the NodeNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNodeNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NodeNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NodeNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNodeNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NodeNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Node property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNode(object sender, System.EventArgs eventArgs)
        {
            this.Node = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NODENAME"))
            {
                return this.NodeName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NODE"))
            {
                this.Node = ((IModelElement)(value));
                return;
            }
            if ((feature == "NODENAME"))
            {
                this.NodeName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Node"))
            {
                return new NodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Node"))
            {
                return new NodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//TripleMatchNodeMapp" +
                        "ing/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TripleMatchNodeMapping class
        /// </summary>
        public class TripleMatchNodeMappingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TripleMatchNodeMapping _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TripleMatchNodeMappingReferencedElementsCollection(TripleMatchNodeMapping parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Node != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NodeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NodeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Node == null))
                {
                    this._parent.Node = item;
                    return;
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Node = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Node))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Node != null))
                {
                    array[arrayIndex] = this._parent.Node;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Node == item))
                {
                    this._parent.Node = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Node).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nodeName property
        /// </summary>
        private sealed class NodeNameProxy : ModelPropertyChange<ITripleMatchNodeMapping, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NodeNameProxy(ITripleMatchNodeMapping modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NodeName;
                }
                set
                {
                    this.ModelElement.NodeName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NodeNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NodeNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the node property
        /// </summary>
        private sealed class NodeProxy : ModelPropertyChange<ITripleMatchNodeMapping, IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NodeProxy(ITripleMatchNodeMapping modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IModelElement Value
            {
                get
                {
                    return this.ModelElement.Node;
                }
                set
                {
                    this.ModelElement.Node = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NodeChanged -= handler;
            }
        }
    }
}

