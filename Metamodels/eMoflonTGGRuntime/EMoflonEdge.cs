//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the EMoflonEdge class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//EMoflonEdge")]
    [DebuggerDisplayAttribute("EMoflonEdge {Name}")]
    public partial class EMoflonEdge : NMF.Models.ModelElement, IEMoflonEdge, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nameAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNameAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _srcReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSrcReference);
        
        /// <summary>
        /// The backing field for the Src property
        /// </summary>
        private NMF.Models.IModelElement _src;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _trgReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTrgReference);
        
        /// <summary>
        /// The backing field for the Trg property
        /// </summary>
        private NMF.Models.IModelElement _trg;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The src property
        /// </summary>
        [XmlElementNameAttribute("src")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.IModelElement Src
        {
            get
            {
                return this._src;
            }
            set
            {
                if ((this._src != value))
                {
                    NMF.Models.IModelElement old = this._src;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSrcChanging(e);
                    this.OnPropertyChanging("Src", e, _srcReference);
                    this._src = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSrc;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSrc;
                    }
                    this.OnSrcChanged(e);
                    this.OnPropertyChanged("Src", e, _srcReference);
                }
            }
        }
        
        /// <summary>
        /// The trg property
        /// </summary>
        [XmlElementNameAttribute("trg")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.IModelElement Trg
        {
            get
            {
                return this._trg;
            }
            set
            {
                if ((this._trg != value))
                {
                    NMF.Models.IModelElement old = this._trg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrgChanging(e);
                    this.OnPropertyChanging("Trg", e, _trgReference);
                    this._trg = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTrg;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTrg;
                    }
                    this.OnTrgChanged(e);
                    this.OnPropertyChanged("Trg", e, _trgReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EMoflonEdgeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//EMoflonEdge")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Src property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SrcChanging;
        
        /// <summary>
        /// Gets fired when the Src property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SrcChanged;
        
        /// <summary>
        /// Gets fired before the Trg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrgChanging;
        
        /// <summary>
        /// Gets fired when the Trg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrgChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveNameAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.EMoflonEdge.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSrcReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.EMoflonEdge.ClassInstance)).Resolve("src")));
        }
        
        /// <summary>
        /// Raises the SrcChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSrcChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SrcChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SrcChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSrcChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SrcChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Src property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSrc(object sender, System.EventArgs eventArgs)
        {
            this.Src = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTrgReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((NMF.Models.ModelElement)(NMF.SynchronizationsBenchmark.Runtime.EMoflonEdge.ClassInstance)).Resolve("trg")));
        }
        
        /// <summary>
        /// Raises the TrgChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrgChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrgChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrgChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrgChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrgChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Trg property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTrg(object sender, System.EventArgs eventArgs)
        {
            this.Trg = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SRC"))
            {
                this.Src = ((NMF.Models.IModelElement)(value));
                return;
            }
            if ((feature == "TRG"))
            {
                this.Trg = ((NMF.Models.IModelElement)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Src"))
            {
                return new SrcProxy(this);
            }
            if ((attribute == "Trg"))
            {
                return new TrgProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Src"))
            {
                return new SrcProxy(this);
            }
            if ((reference == "Trg"))
            {
                return new TrgProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//EMoflonEdge")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EMoflonEdge class
        /// </summary>
        public class EMoflonEdgeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private EMoflonEdge _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EMoflonEdgeReferencedElementsCollection(EMoflonEdge parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Src != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Trg != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SrcChanged += this.PropagateValueChanges;
                this._parent.TrgChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SrcChanged -= this.PropagateValueChanges;
                this._parent.TrgChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.Src == null))
                {
                    this._parent.Src = item;
                    return;
                }
                if ((this._parent.Trg == null))
                {
                    this._parent.Trg = item;
                    return;
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Src = null;
                this._parent.Trg = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.Src))
                {
                    return true;
                }
                if ((item == this._parent.Trg))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Src != null))
                {
                    array[arrayIndex] = this._parent.Src;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Trg != null))
                {
                    array[arrayIndex] = this._parent.Trg;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.Src == item))
                {
                    this._parent.Src = null;
                    return true;
                }
                if ((this._parent.Trg == item))
                {
                    this._parent.Trg = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Src).Concat(this._parent.Trg).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IEMoflonEdge, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IEMoflonEdge modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the src property
        /// </summary>
        private sealed class SrcProxy : ModelPropertyChange<IEMoflonEdge, NMF.Models.IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SrcProxy(IEMoflonEdge modelElement) : 
                    base(modelElement, "src")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.IModelElement Value
            {
                get
                {
                    return this.ModelElement.Src;
                }
                set
                {
                    this.ModelElement.Src = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the trg property
        /// </summary>
        private sealed class TrgProxy : ModelPropertyChange<IEMoflonEdge, NMF.Models.IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrgProxy(IEMoflonEdge modelElement) : 
                    base(modelElement, "trg")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.IModelElement Value
            {
                get
                {
                    return this.ModelElement.Trg;
                }
                set
                {
                    this.ModelElement.Trg = value;
                }
            }
        }
    }
}

