//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the TripleMatch class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//TripleMatch/")]
    public class TripleMatch : ModelElement, ITripleMatch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RuleName property
        /// </summary>
        private string _ruleName;
        
        /// <summary>
        /// The backing field for the Number property
        /// </summary>
        private int _number;
        
        /// <summary>
        /// The backing field for the SourceElements property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _sourceElements;
        
        /// <summary>
        /// The backing field for the ContextElements property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _contextElements;
        
        /// <summary>
        /// The backing field for the NodeMappings property
        /// </summary>
        private ObservableCompositionOrderedSet<ITripleMatchNodeMapping> _nodeMappings;
        
        /// <summary>
        /// The backing field for the ContainedEdges property
        /// </summary>
        private ObservableCompositionOrderedSet<IModelElement> _containedEdges;
        
        /// <summary>
        /// The backing field for the TargetElements property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _targetElements;
        
        /// <summary>
        /// The backing field for the CorrespondenceElements property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _correspondenceElements;
        
        /// <summary>
        /// The backing field for the CreatedElements property
        /// </summary>
        private ObservableAssociationOrderedSet<IModelElement> _createdElements;
        
        /// <summary>
        /// The backing field for the Children property
        /// </summary>
        private ObservableAssociationOrderedSet<ITripleMatch> _children;
        
        private static IClass _classInstance;
        
        public TripleMatch()
        {
            this._sourceElements = new ObservableAssociationOrderedSet<IModelElement>();
            this._sourceElements.CollectionChanging += this.SourceElementsCollectionChanging;
            this._sourceElements.CollectionChanged += this.SourceElementsCollectionChanged;
            this._contextElements = new ObservableAssociationOrderedSet<IModelElement>();
            this._contextElements.CollectionChanging += this.ContextElementsCollectionChanging;
            this._contextElements.CollectionChanged += this.ContextElementsCollectionChanged;
            this._nodeMappings = new ObservableCompositionOrderedSet<ITripleMatchNodeMapping>(this);
            this._nodeMappings.CollectionChanging += this.NodeMappingsCollectionChanging;
            this._nodeMappings.CollectionChanged += this.NodeMappingsCollectionChanged;
            this._containedEdges = new ObservableCompositionOrderedSet<IModelElement>(this);
            this._containedEdges.CollectionChanging += this.ContainedEdgesCollectionChanging;
            this._containedEdges.CollectionChanged += this.ContainedEdgesCollectionChanged;
            this._targetElements = new ObservableAssociationOrderedSet<IModelElement>();
            this._targetElements.CollectionChanging += this.TargetElementsCollectionChanging;
            this._targetElements.CollectionChanged += this.TargetElementsCollectionChanged;
            this._correspondenceElements = new ObservableAssociationOrderedSet<IModelElement>();
            this._correspondenceElements.CollectionChanging += this.CorrespondenceElementsCollectionChanging;
            this._correspondenceElements.CollectionChanged += this.CorrespondenceElementsCollectionChanged;
            this._createdElements = new ObservableAssociationOrderedSet<IModelElement>();
            this._createdElements.CollectionChanging += this.CreatedElementsCollectionChanging;
            this._createdElements.CollectionChanged += this.CreatedElementsCollectionChanged;
            this._children = new ObservableAssociationOrderedSet<ITripleMatch>();
            this._children.CollectionChanging += this.ChildrenCollectionChanging;
            this._children.CollectionChanged += this.ChildrenCollectionChanged;
        }
        
        /// <summary>
        /// The ruleName property
        /// </summary>
        [XmlElementNameAttribute("ruleName")]
        [XmlAttributeAttribute(true)]
        public virtual string RuleName
        {
            get
            {
                return this._ruleName;
            }
            set
            {
                if ((this._ruleName != value))
                {
                    string old = this._ruleName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRuleNameChanging(e);
                    this.OnPropertyChanging("RuleName", e);
                    this._ruleName = value;
                    this.OnRuleNameChanged(e);
                    this.OnPropertyChanged("RuleName", e);
                }
            }
        }
        
        /// <summary>
        /// The number property
        /// </summary>
        [XmlElementNameAttribute("number")]
        [XmlAttributeAttribute(true)]
        public virtual int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    int old = this._number;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberChanging(e);
                    this.OnPropertyChanging("Number", e);
                    this._number = value;
                    this.OnNumberChanged(e);
                    this.OnPropertyChanged("Number", e);
                }
            }
        }
        
        /// <summary>
        /// The sourceElements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("sourceElements")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> SourceElements
        {
            get
            {
                return this._sourceElements;
            }
        }
        
        /// <summary>
        /// The contextElements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("contextElements")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> ContextElements
        {
            get
            {
                return this._contextElements;
            }
        }
        
        /// <summary>
        /// The nodeMappings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("nodeMappings")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITripleMatchNodeMapping> NodeMappings
        {
            get
            {
                return this._nodeMappings;
            }
        }
        
        /// <summary>
        /// The containedEdges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("containedEdges")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> ContainedEdges
        {
            get
            {
                return this._containedEdges;
            }
        }
        
        /// <summary>
        /// The targetElements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("targetElements")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> TargetElements
        {
            get
            {
                return this._targetElements;
            }
        }
        
        /// <summary>
        /// The correspondenceElements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("correspondenceElements")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> CorrespondenceElements
        {
            get
            {
                return this._correspondenceElements;
            }
        }
        
        /// <summary>
        /// The createdElements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("createdElements")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IModelElement> CreatedElements
        {
            get
            {
                return this._createdElements;
            }
        }
        
        /// <summary>
        /// The children property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("children")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITripleMatch> Children
        {
            get
            {
                return this._children;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TripleMatchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//TripleMatch/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RuleName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuleNameChanging;
        
        /// <summary>
        /// Gets fired when the RuleName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuleNameChanged;
        
        /// <summary>
        /// Gets fired before the Number property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberChanging;
        
        /// <summary>
        /// Gets fired when the Number property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberChanged;
        
        /// <summary>
        /// Raises the RuleNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuleNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuleNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RuleNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuleNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuleNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SourceElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SourceElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SourceElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SourceElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SourceElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SourceElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContextElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContextElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContextElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContextElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NodeMappings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeMappingsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("NodeMappings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NodeMappings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NodeMappingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NodeMappings", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContainedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContainedEdgesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContainedEdges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContainedEdges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContainedEdgesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContainedEdges", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TargetElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TargetElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TargetElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TargetElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TargetElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TargetElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CorrespondenceElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CorrespondenceElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CorrespondenceElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CorrespondenceElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CorrespondenceElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CorrespondenceElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CreatedElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CreatedElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CreatedElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CreatedElements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CreatedElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CreatedElements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Children property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildrenCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Children", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Children property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildrenCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Children", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int nodeMappingsIndex = ModelHelper.IndexOfReference(this.NodeMappings, element);
            if ((nodeMappingsIndex != -1))
            {
                return ModelHelper.CreatePath("nodeMappings", nodeMappingsIndex);
            }
            int containedEdgesIndex = ModelHelper.IndexOfReference(this.ContainedEdges, element);
            if ((containedEdgesIndex != -1))
            {
                return ModelHelper.CreatePath("containedEdges", containedEdgesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NODEMAPPINGS"))
            {
                if ((index < this.NodeMappings.Count))
                {
                    return this.NodeMappings[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "CONTAINEDEDGES"))
            {
                if ((index < this.ContainedEdges.Count))
                {
                    return this.ContainedEdges[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RULENAME"))
            {
                return this.RuleName;
            }
            if ((attribute == "NUMBER"))
            {
                return this.Number;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SOURCEELEMENTS"))
            {
                return this._sourceElements;
            }
            if ((feature == "CONTEXTELEMENTS"))
            {
                return this._contextElements;
            }
            if ((feature == "NODEMAPPINGS"))
            {
                return this._nodeMappings;
            }
            if ((feature == "CONTAINEDEDGES"))
            {
                return this._containedEdges;
            }
            if ((feature == "TARGETELEMENTS"))
            {
                return this._targetElements;
            }
            if ((feature == "CORRESPONDENCEELEMENTS"))
            {
                return this._correspondenceElements;
            }
            if ((feature == "CREATEDELEMENTS"))
            {
                return this._createdElements;
            }
            if ((feature == "CHILDREN"))
            {
                return this._children;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RULENAME"))
            {
                this.RuleName = ((string)(value));
                return;
            }
            if ((feature == "NUMBER"))
            {
                this.Number = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//TripleMatch/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TripleMatch class
        /// </summary>
        public class TripleMatchChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TripleMatch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TripleMatchChildrenCollection(TripleMatch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NodeMappings.Count);
                    count = (count + this._parent.ContainedEdges.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NodeMappings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContainedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NodeMappings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContainedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITripleMatchNodeMapping nodeMappingsCasted = item.As<ITripleMatchNodeMapping>();
                if ((nodeMappingsCasted != null))
                {
                    this._parent.NodeMappings.Add(nodeMappingsCasted);
                }
                this._parent.ContainedEdges.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NodeMappings.Clear();
                this._parent.ContainedEdges.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NodeMappings.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContainedEdges.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nodeMappingsEnumerator = this._parent.NodeMappings.GetEnumerator();
                try
                {
                    for (
                    ; nodeMappingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeMappingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeMappingsEnumerator.Dispose();
                }
                this._parent.ContainedEdges.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.ContainedEdges.Count);
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITripleMatchNodeMapping tripleMatchNodeMappingItem = item.As<ITripleMatchNodeMapping>();
                if (((tripleMatchNodeMappingItem != null) 
                            && this._parent.NodeMappings.Remove(tripleMatchNodeMappingItem)))
                {
                    return true;
                }
                if (this._parent.ContainedEdges.Remove(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NodeMappings).Concat(this._parent.ContainedEdges).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TripleMatch class
        /// </summary>
        public class TripleMatchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TripleMatch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TripleMatchReferencedElementsCollection(TripleMatch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SourceElements.Count);
                    count = (count + this._parent.ContextElements.Count);
                    count = (count + this._parent.NodeMappings.Count);
                    count = (count + this._parent.ContainedEdges.Count);
                    count = (count + this._parent.TargetElements.Count);
                    count = (count + this._parent.CorrespondenceElements.Count);
                    count = (count + this._parent.CreatedElements.Count);
                    count = (count + this._parent.Children.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SourceElements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContextElements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NodeMappings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContainedEdges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TargetElements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CorrespondenceElements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CreatedElements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Children.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SourceElements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContextElements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NodeMappings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContainedEdges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TargetElements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CorrespondenceElements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CreatedElements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Children.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                this._parent.SourceElements.Add(item);
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SourceElements.Clear();
                this._parent.ContextElements.Clear();
                this._parent.NodeMappings.Clear();
                this._parent.ContainedEdges.Clear();
                this._parent.TargetElements.Clear();
                this._parent.CorrespondenceElements.Clear();
                this._parent.CreatedElements.Clear();
                this._parent.Children.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SourceElements.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContextElements.Contains(item))
                {
                    return true;
                }
                if (this._parent.NodeMappings.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContainedEdges.Contains(item))
                {
                    return true;
                }
                if (this._parent.TargetElements.Contains(item))
                {
                    return true;
                }
                if (this._parent.CorrespondenceElements.Contains(item))
                {
                    return true;
                }
                if (this._parent.CreatedElements.Contains(item))
                {
                    return true;
                }
                if (this._parent.Children.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                this._parent.SourceElements.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.SourceElements.Count);
                this._parent.ContextElements.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.ContextElements.Count);
                IEnumerator<IModelElement> nodeMappingsEnumerator = this._parent.NodeMappings.GetEnumerator();
                try
                {
                    for (
                    ; nodeMappingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nodeMappingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nodeMappingsEnumerator.Dispose();
                }
                this._parent.ContainedEdges.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.ContainedEdges.Count);
                this._parent.TargetElements.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.TargetElements.Count);
                this._parent.CorrespondenceElements.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.CorrespondenceElements.Count);
                this._parent.CreatedElements.CopyTo(array, arrayIndex);
                arrayIndex = (arrayIndex + this._parent.CreatedElements.Count);
                IEnumerator<IModelElement> childrenEnumerator = this._parent.Children.GetEnumerator();
                try
                {
                    for (
                    ; childrenEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = childrenEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    childrenEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if (this._parent.SourceElements.Remove(item))
                {
                    return true;
                }
                if (this._parent.ContextElements.Remove(item))
                {
                    return true;
                }
                ITripleMatchNodeMapping tripleMatchNodeMappingItem = item.As<ITripleMatchNodeMapping>();
                if (((tripleMatchNodeMappingItem != null) 
                            && this._parent.NodeMappings.Remove(tripleMatchNodeMappingItem)))
                {
                    return true;
                }
                if (this._parent.ContainedEdges.Remove(item))
                {
                    return true;
                }
                if (this._parent.TargetElements.Remove(item))
                {
                    return true;
                }
                if (this._parent.CorrespondenceElements.Remove(item))
                {
                    return true;
                }
                if (this._parent.CreatedElements.Remove(item))
                {
                    return true;
                }
                ITripleMatch tripleMatchItem = item.As<ITripleMatch>();
                if (((tripleMatchItem != null) 
                            && this._parent.Children.Remove(tripleMatchItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SourceElements).Concat(this._parent.ContextElements).Concat(this._parent.NodeMappings).Concat(this._parent.ContainedEdges).Concat(this._parent.TargetElements).Concat(this._parent.CorrespondenceElements).Concat(this._parent.CreatedElements).Concat(this._parent.Children).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ruleName property
        /// </summary>
        private sealed class RuleNameProxy : ModelPropertyChange<ITripleMatch, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RuleNameProxy(ITripleMatch modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RuleName;
                }
                set
                {
                    this.ModelElement.RuleName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuleNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuleNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the number property
        /// </summary>
        private sealed class NumberProxy : ModelPropertyChange<ITripleMatch, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberProxy(ITripleMatch modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Number;
                }
                set
                {
                    this.ModelElement.Number = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumberChanged -= handler;
            }
        }
    }
}

