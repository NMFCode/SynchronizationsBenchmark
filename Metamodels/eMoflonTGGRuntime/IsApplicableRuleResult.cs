//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the IsApplicableRuleResult class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//IsApplicableRuleRes" +
        "ult/")]
    public class IsApplicableRuleResult : RuleResult, IIsApplicableRuleResult, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsApplicableMatch property
        /// </summary>
        private IsApplicableRuleResultIsApplicableMatchCollection _isApplicableMatch;
        
        /// <summary>
        /// The backing field for the PerformOperation property
        /// </summary>
        private IEOperation _performOperation;
        
        /// <summary>
        /// The backing field for the CoreMatch property
        /// </summary>
        private IMatch _coreMatch;
        
        private static IClass _classInstance;
        
        public IsApplicableRuleResult()
        {
            this._isApplicableMatch = new IsApplicableRuleResultIsApplicableMatchCollection(this);
            this._isApplicableMatch.CollectionChanging += this.IsApplicableMatchCollectionChanging;
            this._isApplicableMatch.CollectionChanged += this.IsApplicableMatchCollectionChanged;
        }
        
        /// <summary>
        /// The isApplicableMatch property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("isApplicableMatch")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("isApplicableRuleResult")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIsApplicableMatch> IsApplicableMatch
        {
            get
            {
                return this._isApplicableMatch;
            }
        }
        
        /// <summary>
        /// The performOperation property
        /// </summary>
        [XmlElementNameAttribute("performOperation")]
        [XmlAttributeAttribute(true)]
        public virtual IEOperation PerformOperation
        {
            get
            {
                return this._performOperation;
            }
            set
            {
                if ((this._performOperation != value))
                {
                    IEOperation old = this._performOperation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPerformOperationChanging(e);
                    this.OnPropertyChanging("PerformOperation", e);
                    this._performOperation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPerformOperation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPerformOperation;
                    }
                    this.OnPerformOperationChanged(e);
                    this.OnPropertyChanged("PerformOperation", e);
                }
            }
        }
        
        /// <summary>
        /// The coreMatch property
        /// </summary>
        [XmlElementNameAttribute("coreMatch")]
        [XmlAttributeAttribute(true)]
        public virtual IMatch CoreMatch
        {
            get
            {
                return this._coreMatch;
            }
            set
            {
                if ((this._coreMatch != value))
                {
                    IMatch old = this._coreMatch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreMatchChanging(e);
                    this.OnPropertyChanging("CoreMatch", e);
                    this._coreMatch = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCoreMatch;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCoreMatch;
                    }
                    this.OnCoreMatchChanged(e);
                    this.OnPropertyChanged("CoreMatch", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new IsApplicableRuleResultChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new IsApplicableRuleResultReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//IsApplicableRuleRes" +
                            "ult/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PerformOperation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerformOperationChanging;
        
        /// <summary>
        /// Gets fired when the PerformOperation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerformOperationChanged;
        
        /// <summary>
        /// Gets fired before the CoreMatch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreMatchChanging;
        
        /// <summary>
        /// Gets fired when the CoreMatch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreMatchChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IsApplicableMatch property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IsApplicableMatchCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("IsApplicableMatch", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IsApplicableMatch property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IsApplicableMatchCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IsApplicableMatch", e);
        }
        
        /// <summary>
        /// Raises the PerformOperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerformOperationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerformOperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PerformOperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerformOperationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerformOperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PerformOperation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPerformOperation(object sender, System.EventArgs eventArgs)
        {
            this.PerformOperation = null;
        }
        
        /// <summary>
        /// Raises the CoreMatchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreMatchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreMatchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreMatchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreMatchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreMatchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CoreMatch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCoreMatch(object sender, System.EventArgs eventArgs)
        {
            this.CoreMatch = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int isApplicableMatchIndex = ModelHelper.IndexOfReference(this.IsApplicableMatch, element);
            if ((isApplicableMatchIndex != -1))
            {
                return ModelHelper.CreatePath("isApplicableMatch", isApplicableMatchIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ISAPPLICABLEMATCH"))
            {
                if ((index < this.IsApplicableMatch.Count))
                {
                    return this.IsApplicableMatch[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ISAPPLICABLEMATCH"))
            {
                return this._isApplicableMatch;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PERFORMOPERATION"))
            {
                this.PerformOperation = ((IEOperation)(value));
                return;
            }
            if ((feature == "COREMATCH"))
            {
                this.CoreMatch = ((IMatch)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PerformOperation"))
            {
                return new PerformOperationProxy(this);
            }
            if ((attribute == "CoreMatch"))
            {
                return new CoreMatchProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PerformOperation"))
            {
                return new PerformOperationProxy(this);
            }
            if ((reference == "CoreMatch"))
            {
                return new CoreMatchProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//IsApplicableRuleRes" +
                        "ult/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IsApplicableRuleResult class
        /// </summary>
        public class IsApplicableRuleResultChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IsApplicableRuleResult _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IsApplicableRuleResultChildrenCollection(IsApplicableRuleResult parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.IsApplicableMatch.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IsApplicableMatch.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IsApplicableMatch.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IIsApplicableMatch isApplicableMatchCasted = item.As<IIsApplicableMatch>();
                if ((isApplicableMatchCasted != null))
                {
                    this._parent.IsApplicableMatch.Add(isApplicableMatchCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IsApplicableMatch.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.IsApplicableMatch.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> isApplicableMatchEnumerator = this._parent.IsApplicableMatch.GetEnumerator();
                try
                {
                    for (
                    ; isApplicableMatchEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = isApplicableMatchEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    isApplicableMatchEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IIsApplicableMatch isApplicableMatchItem = item.As<IIsApplicableMatch>();
                if (((isApplicableMatchItem != null) 
                            && this._parent.IsApplicableMatch.Remove(isApplicableMatchItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IsApplicableMatch).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IsApplicableRuleResult class
        /// </summary>
        public class IsApplicableRuleResultReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IsApplicableRuleResult _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IsApplicableRuleResultReferencedElementsCollection(IsApplicableRuleResult parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.IsApplicableMatch.Count);
                    if ((this._parent.PerformOperation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CoreMatch != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IsApplicableMatch.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PerformOperationChanged += this.PropagateValueChanges;
                this._parent.CoreMatchChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IsApplicableMatch.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PerformOperationChanged -= this.PropagateValueChanges;
                this._parent.CoreMatchChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IIsApplicableMatch isApplicableMatchCasted = item.As<IIsApplicableMatch>();
                if ((isApplicableMatchCasted != null))
                {
                    this._parent.IsApplicableMatch.Add(isApplicableMatchCasted);
                }
                if ((this._parent.PerformOperation == null))
                {
                    IEOperation performOperationCasted = item.As<IEOperation>();
                    if ((performOperationCasted != null))
                    {
                        this._parent.PerformOperation = performOperationCasted;
                        return;
                    }
                }
                if ((this._parent.CoreMatch == null))
                {
                    IMatch coreMatchCasted = item.As<IMatch>();
                    if ((coreMatchCasted != null))
                    {
                        this._parent.CoreMatch = coreMatchCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IsApplicableMatch.Clear();
                this._parent.PerformOperation = null;
                this._parent.CoreMatch = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.IsApplicableMatch.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PerformOperation))
                {
                    return true;
                }
                if ((item == this._parent.CoreMatch))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> isApplicableMatchEnumerator = this._parent.IsApplicableMatch.GetEnumerator();
                try
                {
                    for (
                    ; isApplicableMatchEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = isApplicableMatchEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    isApplicableMatchEnumerator.Dispose();
                }
                if ((this._parent.PerformOperation != null))
                {
                    array[arrayIndex] = this._parent.PerformOperation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CoreMatch != null))
                {
                    array[arrayIndex] = this._parent.CoreMatch;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IIsApplicableMatch isApplicableMatchItem = item.As<IIsApplicableMatch>();
                if (((isApplicableMatchItem != null) 
                            && this._parent.IsApplicableMatch.Remove(isApplicableMatchItem)))
                {
                    return true;
                }
                if ((this._parent.PerformOperation == item))
                {
                    this._parent.PerformOperation = null;
                    return true;
                }
                if ((this._parent.CoreMatch == item))
                {
                    this._parent.CoreMatch = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IsApplicableMatch).Concat(this._parent.PerformOperation).Concat(this._parent.CoreMatch).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the performOperation property
        /// </summary>
        private sealed class PerformOperationProxy : ModelPropertyChange<IIsApplicableRuleResult, IEOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PerformOperationProxy(IIsApplicableRuleResult modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEOperation Value
            {
                get
                {
                    return this.ModelElement.PerformOperation;
                }
                set
                {
                    this.ModelElement.PerformOperation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PerformOperationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PerformOperationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreMatch property
        /// </summary>
        private sealed class CoreMatchProxy : ModelPropertyChange<IIsApplicableRuleResult, IMatch>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreMatchProxy(IIsApplicableRuleResult modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMatch Value
            {
                get
                {
                    return this.ModelElement.CoreMatch;
                }
                set
                {
                    this.ModelElement.CoreMatch = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoreMatchChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoreMatchChanged -= handler;
            }
        }
    }
}

