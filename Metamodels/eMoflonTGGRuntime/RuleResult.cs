//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.SynchronizationsBenchmark.Runtime
{
    
    
    /// <summary>
    /// The default implementation of the RuleResult class
    /// </summary>
    [XmlNamespaceAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore")]
    [XmlNamespacePrefixAttribute("org.moflon.tgg.runtime")]
    [ModelRepresentationClassAttribute("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//RuleResult/")]
    public class RuleResult : ModelElement, IRuleResult, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Success property
        /// </summary>
        private bool _success;
        
        /// <summary>
        /// The backing field for the Rule property
        /// </summary>
        private string _rule;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The success property
        /// </summary>
        [XmlElementNameAttribute("success")]
        [XmlAttributeAttribute(true)]
        public virtual bool Success
        {
            get
            {
                return this._success;
            }
            set
            {
                if ((this._success != value))
                {
                    bool old = this._success;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuccessChanging(e);
                    this.OnPropertyChanging("Success", e);
                    this._success = value;
                    this.OnSuccessChanged(e);
                    this.OnPropertyChanged("Success", e);
                }
            }
        }
        
        /// <summary>
        /// The rule property
        /// </summary>
        [XmlElementNameAttribute("rule")]
        [XmlAttributeAttribute(true)]
        public virtual string Rule
        {
            get
            {
                return this._rule;
            }
            set
            {
                if ((this._rule != value))
                {
                    string old = this._rule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRuleChanging(e);
                    this.OnPropertyChanging("Rule", e);
                    this._rule = value;
                    this.OnRuleChanged(e);
                    this.OnPropertyChanged("Rule", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//RuleResult/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Success property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuccessChanging;
        
        /// <summary>
        /// Gets fired when the Success property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuccessChanged;
        
        /// <summary>
        /// Gets fired before the Rule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuleChanging;
        
        /// <summary>
        /// Gets fired when the Rule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuleChanged;
        
        /// <summary>
        /// Raises the SuccessChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuccessChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuccessChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SuccessChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuccessChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuccessChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RuleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RuleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUCCESS"))
            {
                return this.Success;
            }
            if ((attribute == "RULE"))
            {
                return this.Rule;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUCCESS"))
            {
                this.Success = ((bool)(value));
                return;
            }
            if ((feature == "RULE"))
            {
                this.Rule = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/plugin/org.moflon.tgg.runtime/model/Runtime.ecore#//RuleResult/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the success property
        /// </summary>
        private sealed class SuccessProxy : ModelPropertyChange<IRuleResult, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuccessProxy(IRuleResult modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Success;
                }
                set
                {
                    this.ModelElement.Success = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SuccessChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SuccessChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rule property
        /// </summary>
        private sealed class RuleProxy : ModelPropertyChange<IRuleResult, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RuleProxy(IRuleResult modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Rule;
                }
                set
                {
                    this.ModelElement.Rule = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuleChanged -= handler;
            }
        }
    }
}

